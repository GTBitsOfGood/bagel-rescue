This file is a merged representation of the entire codebase, combined into a single document by Repomix.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded

Additional Info:
----------------

================================================================
Directory Structure
================================================================
.github/
  ISSUE_TEMPLATE/
    bagel-feature.md
    bug_report.md
    feature_request.md
netlify/
  functions/
    aggregateCron.mts
    analyticsCron.mts
public/
  next.svg
  vercel.svg
src/
  app/
    AdminNavView/
      AdminHomepage/
        page.module.css
        page.tsx
      AdminProfile/
        page.module.css
        page.tsx
      AnalyticsPage/
        analytics_table.tsx
        leaderboard.tsx
        overview.tsx
        page.tsx
        recent_shifts.tsx
        rescue_records.tsx
        stylesheet.css
      DailyShiftDashboard/
        page.tsx
      LocationPage/
        page.module.css
        page.tsx
      NewShiftPage/
        page.tsx
        stylesheet.css
      RouteCreationPage/
        page.tsx
        stylesheet.css
      WeeklyShiftDashboard/
        page.tsx
        stylesheet.css
    components/
      DailyDashboard.tsx
      DailyShiftBar.tsx
    Login/
      BackButton.tsx
      Button.tsx
      ErrorText.tsx
      HalfScreen.tsx
      page.tsx
      TextInput.tsx
    VolunteerNavView/
      Analytics/
        page.module.css
        page.tsx
      Homepage/
        page.module.css
        page.tsx
      MyShifts/
        page.module.css
        page.tsx
      Profile/
        page.module.css
        page.tsx
    globals.css
    layout.tsx
    page.tsx
  assets/
    analytics_bagel.svg
    analytics-bitten-bagel.svg
    analytics-car.svg
  components/
    AdminProfileForm.tsx
    AdminSidebar.tsx
    ProfileForm.module.css
    ProfileForm.tsx
    Providers.tsx
    Sidebar.module.css
    Sidebar.tsx
  server/
    db/
      actions/
        analytics.ts
        location.ts
        Login.ts
        Route.ts
        shift.ts
        User.ts
      firebase/
        admin/
          config.ts
          index.ts
        index.ts
      models/
        analytics.ts
        location.ts
        Route.ts
        shift.ts
        User.ts
      dbConnect.ts
.eslintrc.json
.gitignore
env.d.ts
netlify.toml
next.config.mjs
package.json
postcss.config.mjs
README.md
tailwind.config.ts
tsconfig.json

================================================================
Files
================================================================

================
File: .github/ISSUE_TEMPLATE/bagel-feature.md
================
---
name: Bagel Feature
about: Describe this issue template's purpose here.
title: ''
labels: ''
assignees: ''

---

### Description
---

### Acceptance Criteria
---


### Implementation Notes
---

================
File: .github/ISSUE_TEMPLATE/bug_report.md
================
---
name: Bug report
about: Create a report to help us improve
title: ''
labels: ''
assignees: ''

---

**Describe the bug**
A clear and concise description of what the bug is.

**To Reproduce**
Steps to reproduce the behavior:
1. Go to '...'
2. Click on '....'
3. Scroll down to '....'
4. See error

**Expected behavior**
A clear and concise description of what you expected to happen.

**Screenshots**
If applicable, add screenshots to help explain your problem.

**Desktop (please complete the following information):**
 - OS: [e.g. iOS]
 - Browser [e.g. chrome, safari]
 - Version [e.g. 22]

**Smartphone (please complete the following information):**
 - Device: [e.g. iPhone6]
 - OS: [e.g. iOS8.1]
 - Browser [e.g. stock browser, safari]
 - Version [e.g. 22]

**Additional context**
Add any other context about the problem here.

================
File: .github/ISSUE_TEMPLATE/feature_request.md
================
---
name: Feature request
about: Suggest an idea for this project
title: ''
labels: ''
assignees: ''

---

**Is your feature request related to a problem? Please describe.**
A clear and concise description of what the problem is. Ex. I'm always frustrated when [...]

**Describe the solution you'd like**
A clear and concise description of what you want to happen.

**Describe alternatives you've considered**
A clear and concise description of any alternative solutions or features you've considered.

**Additional context**
Add any other context or screenshots about the feature request here.

================
File: netlify/functions/aggregateCron.mts
================
import {
  getAllUserStats,
  getTotalBagelsDelivered,
} from "../../src/server/db/actions/User";
import {
  getShiftAnalytics,
  getRecentShifts,
} from "../../src/server/db/actions/shift";
import { getAllRoutes } from "../../src/server/db/actions/Route";

type AggregatedData = {
  totalBagelsDelivered: number | null;
  shiftsThisMonth: any;
  shiftsMonthlyAverage: any;
  recentShifts: any;
  aggregatedBagelsDelivered: number;
  aggregatedTotalDeliveries: number;
};

const aggregateHandler = async () => {
  let retryCount = 0;
  let success = false;

  let aggregatedData: AggregatedData | null = null; // Store aggregated data for display

  while (!success && retryCount < 1) {
    try {
      const totalBagelsDelivered = await getTotalBagelsDelivered();

      const shiftOverview = JSON.parse((await getShiftAnalytics()) || "");
      const recentShifts = JSON.parse((await getRecentShifts(5)) || "[]");

      const routes_data = JSON.parse((await getAllRoutes()) || "[]");
      const route_id_to_name_map = new Map(
        routes_data.map((r) => [r._id.toString(), r.routeName])
      );
      const formattedRecentShifts = recentShifts.map((s) => {
        return {
          shiftName: route_id_to_name_map.get(s.routeId) || "",
          shiftDate: s.date,
        };
      });

      const allUserStats = JSON.parse((await getAllUserStats()) || "[]");

      const aggregatedStats = allUserStats.reduce(
        (totals, user) => {
          return {
            totalBagelsDelivered:
              totals.totalBagelsDelivered + (user.bagelsDelivered || 0),
            totalDeliveries:
              totals.totalDeliveries + (user.totalDeliveries || 0),
          };
        },
        {
          totalBagelsDelivered: 0,
          totalDeliveries: 0,
        }
      );

      aggregatedData = {
        totalBagelsDelivered,
        shiftsThisMonth: shiftOverview.thisMonth,
        shiftsMonthlyAverage: shiftOverview.monthlyAverage,
        recentShifts: formattedRecentShifts,
        aggregatedBagelsDelivered: aggregatedStats.totalBagelsDelivered,
        aggregatedTotalDeliveries: aggregatedStats.totalDeliveries,
      };

      success = true;
      console.log(
        "Aggregated analytics calculated successfully",
        aggregatedData
      );
      return {
        statusCode: 200,
        message: "Aggregation successful.",
        data: aggregatedData,
      };
    } catch (err) {
      console.error(err);
      retryCount++;
    }
  }

  return {
    statusCode: 500,
    message: "Aggregation failed.",
    data: aggregatedData,
  };
};

export const handler = async (event, context) => {
  try {
    const result = await aggregateHandler();
    return {
      statusCode: result.statusCode,
      body: JSON.stringify({
        message: result.message,
        data: result.data,
      }),
    };
  } catch (error) {
    console.error(error);
    return {
      statusCode: 500,
      body: JSON.stringify({
        message: "Error during aggregation",
        error: error.message,
      }),
    };
  }
};

export { aggregateHandler };

export const config = {
  schedule: "@daily",
};

================
File: netlify/functions/analyticsCron.mts
================
import { updateAnalytics } from "../../src/server/db/actions/analytics";
import {
  getAllUserStats,
  getTotalBagelsDelivered,
} from "../../src/server/db/actions/User";
import {
  getShiftAnalytics,
  getRecentShifts,
} from "../../src/server/db/actions/shift";
import { getAllRoutes } from "../../src/server/db/actions/Route";
import {
  AnalyticsModel,
  LeaderboardUser,
} from "../../src/server/db/models/analytics";
import { IRoute } from "../../src/server/db/models/Route";

const handler = async () => {
  let retryCount = 0;
  let success = false;

  while (!success && retryCount < 1) {
    try {
      const totalBagelsDelivered = await getTotalBagelsDelivered();

      const shiftOverview = JSON.parse((await getShiftAnalytics()) || "");

      const recentShifts = JSON.parse((await getRecentShifts(5)) || "[]");
      const routes_data = JSON.parse((await getAllRoutes()) || "[]");
      const route_id_to_name_map = new Map<string, string>(
        routes_data.map((r: IRoute) => [r._id.toString(), r.routeName])
      );
      const formattedRecentShifts = recentShifts.map((s) => {
        return {
          shiftName: route_id_to_name_map.get(s.routeId) || "",
          shiftDate: s.date,
        };
      });

      const allUserStats = JSON.parse((await getAllUserStats()) || "[]");
      const bagelsDeliveredLeaderboardUsers = allUserStats
        .sort(
          (a: LeaderboardUser, b: LeaderboardUser) =>
            (b["bagelsDelivered"] as number) - (a["bagelsDelivered"] as number)
        )
        .slice(0, 3);
      const totalDeliveriesLeaderboardUsers = allUserStats
        .sort(
          (a: LeaderboardUser, b: LeaderboardUser) =>
            (b["totalDeliveries"] as number) - (a["totalDeliveries"] as number)
        )
        .slice(0, 3);

      await updateAnalytics(
        new AnalyticsModel({
          totalBagelsDelivered: totalBagelsDelivered,
          shiftsThisMonth: shiftOverview.thisMonth,
          shiftsMonthlyAverage: shiftOverview.monthlyAverage,
          recentShifts: formattedRecentShifts,
          leaderboardUsersBagelsDelivered: bagelsDeliveredLeaderboardUsers,
          leaderboardUsersTotalDeliveries: totalDeliveriesLeaderboardUsers,
        })
      );
      success = true;
      console.log("Analytics updated successfully");
      return { statusCode: 200 };
    } catch (err) {
      console.log(err);
      retryCount++;
    }
  }

  return { statusCode: 500 };
};

export { handler };

export const config = {
  schedule: "@daily",
};

================
File: public/next.svg
================
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 394 80"><path fill="#000" d="M262 0h68.5v12.7h-27.2v66.6h-13.6V12.7H262V0ZM149 0v12.7H94v20.4h44.3v12.6H94v21h55v12.6H80.5V0h68.7zm34.3 0h-17.8l63.8 79.4h17.9l-32-39.7 32-39.6h-17.9l-23 28.6-23-28.6zm18.3 56.7-9-11-27.1 33.7h17.8l18.3-22.7z"/><path fill="#000" d="M81 79.3 17 0H0v79.3h13.6V17l50.2 62.3H81Zm252.6-.4c-1 0-1.8-.4-2.5-1s-1.1-1.6-1.1-2.6.3-1.8 1-2.5 1.6-1 2.6-1 1.8.3 2.5 1a3.4 3.4 0 0 1 .6 4.3 3.7 3.7 0 0 1-3 1.8zm23.2-33.5h6v23.3c0 2.1-.4 4-1.3 5.5a9.1 9.1 0 0 1-3.8 3.5c-1.6.8-3.5 1.3-5.7 1.3-2 0-3.7-.4-5.3-1s-2.8-1.8-3.7-3.2c-.9-1.3-1.4-3-1.4-5h6c.1.8.3 1.6.7 2.2s1 1.2 1.6 1.5c.7.4 1.5.5 2.4.5 1 0 1.8-.2 2.4-.6a4 4 0 0 0 1.6-1.8c.3-.8.5-1.8.5-3V45.5zm30.9 9.1a4.4 4.4 0 0 0-2-3.3 7.5 7.5 0 0 0-4.3-1.1c-1.3 0-2.4.2-3.3.5-.9.4-1.6 1-2 1.6a3.5 3.5 0 0 0-.3 4c.3.5.7.9 1.3 1.2l1.8 1 2 .5 3.2.8c1.3.3 2.5.7 3.7 1.2a13 13 0 0 1 3.2 1.8 8.1 8.1 0 0 1 3 6.5c0 2-.5 3.7-1.5 5.1a10 10 0 0 1-4.4 3.5c-1.8.8-4.1 1.2-6.8 1.2-2.6 0-4.9-.4-6.8-1.2-2-.8-3.4-2-4.5-3.5a10 10 0 0 1-1.7-5.6h6a5 5 0 0 0 3.5 4.6c1 .4 2.2.6 3.4.6 1.3 0 2.5-.2 3.5-.6 1-.4 1.8-1 2.4-1.7a4 4 0 0 0 .8-2.4c0-.9-.2-1.6-.7-2.2a11 11 0 0 0-2.1-1.4l-3.2-1-3.8-1c-2.8-.7-5-1.7-6.6-3.2a7.2 7.2 0 0 1-2.4-5.7 8 8 0 0 1 1.7-5 10 10 0 0 1 4.3-3.5c2-.8 4-1.2 6.4-1.2 2.3 0 4.4.4 6.2 1.2 1.8.8 3.2 2 4.3 3.4 1 1.4 1.5 3 1.5 5h-5.8z"/></svg>

================
File: public/vercel.svg
================
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 283 64"><path fill="black" d="M141 16c-11 0-19 7-19 18s9 18 20 18c7 0 13-3 16-7l-7-5c-2 3-6 4-9 4-5 0-9-3-10-7h28v-3c0-11-8-18-19-18zm-9 15c1-4 4-7 9-7s8 3 9 7h-18zm117-15c-11 0-19 7-19 18s9 18 20 18c6 0 12-3 16-7l-8-5c-2 3-5 4-8 4-5 0-9-3-11-7h28l1-3c0-11-8-18-19-18zm-10 15c2-4 5-7 10-7s8 3 9 7h-19zm-39 3c0 6 4 10 10 10 4 0 7-2 9-5l8 5c-3 5-9 8-17 8-11 0-19-7-19-18s8-18 19-18c8 0 14 3 17 8l-8 5c-2-3-5-5-9-5-6 0-10 4-10 10zm83-29v46h-9V5h9zM37 0l37 64H0L37 0zm92 5-27 48L74 5h10l18 30 17-30h10zm59 12v10l-3-1c-6 0-10 4-10 10v15h-9V17h9v9c0-5 6-9 13-9z"/></svg>

================
File: src/app/AdminNavView/AdminHomepage/page.module.css
================
.container {
    display: flex;
    height: 100vh;
  }
  
  .sidebar {
    width: 250px;
  }
  
  .mainContent {
    flex: 1;
    padding: 2rem;
  }
  
  .header {
    display: flex;
    flex-direction: column; 
    align-items: flex-start; 
    gap: 0.5rem;
    margin-bottom: 1rem;
  }
  
  .backButton {
    background: none;
    border: none;
    font-size: 1rem;
    color: #64748B; 
    cursor: pointer;
    display: flex;
    align-items: center;
    gap: 4px; 
  }

  .arrow {
    font-size: 1rem;
  }
  
  .pageTitle {
    margin: 0;
    font-size: 1.5rem;
    font-weight: 600; 
    color: #000000;
  }

================
File: src/app/AdminNavView/AdminHomepage/page.tsx
================
'use client'

import Sidebar from '../../../components/Sidebar';
import styles from './page.module.css';

const AdminHomepage: React.FC = () => {
  return (
    <div className={styles.container}>
      <Sidebar />

      <div className={styles.mainContent}>
        <div className={styles.header}>
          <h1 className={styles.pageTitle}>Homepage</h1>
        </div>

      </div>
    </div>
  );
};

export default AdminHomepage;

================
File: src/app/AdminNavView/AdminProfile/page.module.css
================
.container {
    display: flex;
    min-height: 100vh;
    box-sizing: border-box;
  }
  
  .sidebar {
    width: 250px;
    height: 100vh;
  }
  
  .mainContent {
    padding-left: 2rem;
    padding-top: 1.5rem;
    padding-bottom: 1.5rem;
    background-color: #FFFFFF;
    border-bottom: 1px solid #E5E7EB;
    flex-wrap: wrap;
  }
  
  .layout {
    display: flex;
    flex-direction: column;
    flex: auto;
  }

  .header {
    display: flex;
    flex-direction: column; 
    align-items: flex-start; 
    gap: 0.5rem;
    margin-top: .7rem;
  }
  
  .backButton {
    background: none;
    border: none;
    font-size: 1rem;
    color: #64748B; 
    cursor: pointer;
    display: flex;
    align-items: center;
    gap: 4px; 
  }

  .arrow {
    font-size: 1rem;
  }
  
  .pageTitle {
    margin: 0;
    font-size: 2.5rem;
    font-weight: 800; 
    color: #072B68;
  }
  .backDrop{
    background-color: #ECF2F9;
    padding: 2rem;
    height: 100%;
    overflow: hidden; 
    box-sizing: border-box;
    display: flex;
    flex-direction: column;
  }

================
File: src/app/AdminNavView/AdminProfile/page.tsx
================
'use client'

import AdminSidebar from '../../../components/AdminSidebar';
import AdminProfileForm from '../../../components/AdminProfileForm';
import styles from './page.module.css';
const AdminProfile: React.FC = () => {
  return (
    <div className={styles.container}>
      <AdminSidebar />

      <div className={styles.layout}>  
      <div className={styles.mainContent}>

      <button 
            className={styles.backButton}
            onClick={() => window.history.back()}
          >
            &lt; Back
          </button>
        <div className={styles.header}>
          <h1 className={styles.pageTitle}>Account</h1>
        </div>


      </div>
      <div className={styles.backDrop}>
        <AdminProfileForm />
      </div>
      </div>
    </div>
  );
};

export default AdminProfile;

================
File: src/app/AdminNavView/AnalyticsPage/analytics_table.tsx
================
type AnalyticsTableProps = {
  headers: string[];
  data: string[][];
  widths: number[];
};

function AnalyticsTable({ headers, data, widths }: AnalyticsTableProps) {
  return (
    <table className="compact-table">
      <thead>
        <tr>
          {headers.map((h, ind) => (
            <th key={h + ind}>{h}</th>
          ))}
        </tr>
      </thead>
      <tbody>
        {data.map((row, i) => (
          <tr key={"row" + i}>
            {row.map((entry, ind) => (
              <td key={"entry" + ind} style={{ width: widths[ind] + "%" }}>
                {entry}
              </td>
            ))}
          </tr>
        ))}
      </tbody>
    </table>
  );
}

export default AnalyticsTable;

================
File: src/app/AdminNavView/AnalyticsPage/leaderboard.tsx
================
import { useState } from "react";
import "./stylesheet.css";
import { LeaderboardUser } from "@/server/db/models/analytics";

type LeaderboardProps = {
  bagelsDeliveredUsers: LeaderboardUser[];
  totalDeliveriesUsers: LeaderboardUser[];
};

function Leaderboard({
  bagelsDeliveredUsers,
  totalDeliveriesUsers,
}: LeaderboardProps) {
  const leaderboardFields = ["Bagels Delivered", "Total Deliveries"];
  const displayNametoFieldNameMapping = new Map([
    ["Bagels Delivered", "bagelsDelivered"],
    ["Total Deliveries", "totalDeliveries"],
  ]);
  const [currLeaderboardField, setCurrLeaderboardField] =
    useState<string>("Bagels Delivered");
  const fieldNametoLeaderboardList = new Map<string, LeaderboardUser[]>([
    ["Bagels Delivered", bagelsDeliveredUsers],
    ["Total Deliveries", totalDeliveriesUsers],
  ]);

  function LeaderboardTable() {
    return (
      <div>
        <table className="leaderboard-table">
          <thead>
            <tr>
              <th>Name</th>
              <th>{currLeaderboardField}</th>
            </tr>
          </thead>
          <tbody>
            {fieldNametoLeaderboardList
              .get(currLeaderboardField)!
              .map((u, ind) => {
                return (
                  <tr key={u.firstName + u.lastName}>
                    <td>
                      <div className="leaderboard-entry-name">
                        <p className="bold">{ind + 1}</p>
                        <p>{u.firstName + " " + u.lastName}</p>
                      </div>
                    </td>
                    <td>
                      {
                        u[
                          displayNametoFieldNameMapping.get(
                            currLeaderboardField
                          ) as keyof LeaderboardUser
                        ]
                      }
                    </td>
                  </tr>
                );
              })}
          </tbody>
        </table>
      </div>
    );
  }

  return (
    <div className="analytics-card leaderboard">
      <div className="leaderboard-header">
        <p className="analytics-card-title">Leaderboard</p>
        <select
          className="leaderboard-stat"
          id="leaderboard-stat"
          onChange={(e) => {
            setCurrLeaderboardField(e.target.value);
          }}
        >
          {leaderboardFields.map((s) => (
            <option value={s} key={s}>
              {s}
            </option>
          ))}
        </select>
      </div>
      {LeaderboardTable()}
    </div>
  );
}

export default Leaderboard;

================
File: src/app/AdminNavView/AnalyticsPage/overview.tsx
================
import AnalyticsBagel from "../../../assets/analytics_bagel.svg";
import Image from "next/image";

type OverviewProps = {
  totalBagelsDelivered: number;
  bagelsThisMonth: number;
  bagelsMonthlyAverage: number;
  shiftsThisMonth: number;
  shiftsMonthlyAverage: number;
  hoursThisMonth: number;
  hoursMonthlyAverage: number;
};

function Overview({
  totalBagelsDelivered,
  bagelsThisMonth,
  bagelsMonthlyAverage,
  shiftsThisMonth,
  shiftsMonthlyAverage,
  hoursThisMonth,
  hoursMonthlyAverage,
}: OverviewProps) {
  const categories = ["Bagels", "Shifts", "Hours"];
  const overviewStatsMap = new Map<string, number[]>([
    ["Bagels", [bagelsThisMonth, bagelsMonthlyAverage]],
    ["Shifts", [shiftsThisMonth, shiftsMonthlyAverage]],
    ["Hours", [hoursThisMonth, hoursMonthlyAverage]],
  ]);

  return (
    <div className="analytics-card overview">
      <p className="analytics-card-title">Overview</p>
      <div className="overview-stats">
        <div className="analytics-bagel-container">
          <Image
            src={AnalyticsBagel}
            alt="icon"
            layout="fill"
            objectFit="contain"
          />
          <div className="bagels-rescued-label">
            <p className="bagels-rescued-label-text">Bagels Rescued</p>
          </div>
          <div className="bagels-rescued-stat">
            <p className="bagels-rescued-number">
              {totalBagelsDelivered == 0 ? "-" : totalBagelsDelivered}
            </p>
            <p className="bagels-rescued-unit">Bagels</p>
          </div>
        </div>
        {categories.map((c) => (
          <div className="category-overview" key={c + "-category"}>
            <p className="category-overview-title">{c}</p>
            <div className="category-overview-row">
              <div className="category-overview-card">
                <p className="category-overview-label">This Month</p>
                <p className="category-overview-statistic">
                  {overviewStatsMap.has(c) && overviewStatsMap.get(c)![0] != 0
                    ? overviewStatsMap.get(c)![0]
                    : "-"}
                </p>
              </div>
              <div className="category-overview-card">
                <p className="category-overview-label">Monthly Average</p>
                <p className="category-overview-statistic">
                  {overviewStatsMap.has(c) && overviewStatsMap.get(c)![1] != 0
                    ? overviewStatsMap.get(c)![1]
                    : "-"}
                </p>
              </div>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
}

export default Overview;

================
File: src/app/AdminNavView/AnalyticsPage/page.tsx
================
"use client";

import { useEffect, useState } from "react";
import Leaderboard from "./leaderboard";
import Overview from "./overview";
import RecentShifts from "./recent_shifts";
import RescueRecords from "./rescue_records";
import "./stylesheet.css";
import { getAnalytics } from "@/server/db/actions/analytics";
import { Analytics } from "@/server/db/models/analytics";
import AdminSidebar from '../../../components/AdminSidebar';

function AnalyticsPage() {
  const [analytics, setAnalytics] = useState<Analytics | null>(null);

  useEffect(() => {
    const fetchAnalytics = async () => {
      const response = await getAnalytics();
      setAnalytics(JSON.parse(response || ""));
    };
    fetchAnalytics();
  }, []);

  return (
    <div className="big-container">
      <AdminSidebar />
      <div className="container">
        <hr className="separator" />
        <div className="analytics-container">
          <div className="analytics-subcontainer">
            <Overview
              totalBagelsDelivered={
                analytics ? analytics.totalBagelsDelivered : 0
              }
              bagelsThisMonth={0}
              bagelsMonthlyAverage={0}
              shiftsThisMonth={analytics ? analytics.shiftsThisMonth : 0}
              shiftsMonthlyAverage={
                analytics ? analytics.shiftsMonthlyAverage : 0
              }
              hoursThisMonth={0}
              hoursMonthlyAverage={0}
            />
            <RescueRecords />
          </div>
          <div className="analytics-subcontainer">
            <RecentShifts
              recentShifts={analytics ? analytics.recentShifts : []}
            />
            <Leaderboard
              bagelsDeliveredUsers={
                analytics ? analytics.leaderboardUsersBagelsDelivered : []
              }
              totalDeliveriesUsers={
                analytics ? analytics.leaderboardUsersTotalDeliveries : []
              }
            />
          </div>
        </div>
      </div>
    </div>
  );
}

export default AnalyticsPage;

================
File: src/app/AdminNavView/AnalyticsPage/recent_shifts.tsx
================
import { RecentShift } from "@/server/db/models/analytics";
import AnalyticsTable from "./analytics_table";

type RecentShiftsProps = {
  recentShifts: RecentShift[];
};

function RecentShifts({ recentShifts }: RecentShiftsProps) {
  function getTableData() {
    return recentShifts.map((s) => [
      s.shiftName,
      "5",
      new Intl.DateTimeFormat("en-US").format(new Date(s.shiftDate)),
    ]);
  }

  return (
    <div className="analytics-card recent-shifts">
      <p className="analytics-card-title">Recent Shifts</p>
      <AnalyticsTable
        headers={["Name", "Bagels", "Date"]}
        data={getTableData()}
        widths={[55, 25, 20]}
      />
    </div>
  );
}

export default RecentShifts;

================
File: src/app/AdminNavView/AnalyticsPage/rescue_records.tsx
================
import AnalyticsTable from "./analytics_table";
import AnalyticsBittenBagel from "../../../assets/analytics-bitten-bagel.svg";
import AnalyticsCar from "../../../assets/analytics-car.svg";
import Image from "next/image";

function RescueRecords() {
  const categories = ["Most Bagels Delivered in a Shift", "Longest Shift"];
  const units = ["Bagels", "Hours"];
  const svgs = [AnalyticsBittenBagel, AnalyticsCar];
  const offsets = ["4em", "6em"];
  const paddings = ["2.25em", "4em"];

  return (
    <div className="analytics-card rescue-records">
      <p className="analytics-card-title">Rescue Records</p>
      <div className="rescue-records-list">
        {categories.map((c, ind) => {
          return (
            <div className="rescue-records-section" key={c + "-rescue-record"}>
              <p className="rescue-record-title">{c}</p>
              <div
                className="rescue-record-stat-container"
                style={{ paddingBottom: paddings[ind] }}
              >
                <div className="rescue-record-image-container">
                  <Image
                    src={svgs[ind]}
                    alt="icon"
                    layout="fill"
                    objectFit="contain"
                  />
                </div>
                <div
                  className="rescue-record-stat-box"
                  style={{ top: offsets[ind] }}
                >
                  <p className="rescue-record-stat">350</p>
                  <p>{units[ind]}</p>
                </div>
              </div>
              <AnalyticsTable
                headers={["Name", "Hours", "Date"]}
                data={[
                  ["Bob", "5", "10-29-2024"],
                  ["Bob", "5", "10-29-2024"],
                  ["Bob", "5", "10-29-2024"],
                ]}
                widths={[55, 25, 20]}
              />
            </div>
          );
        })}
      </div>
    </div>
  );
}

export default RescueRecords;

================
File: src/app/AdminNavView/AnalyticsPage/stylesheet.css
================
.bold {
  font-weight: 700;
}

.container {
  display: flex;
  flex-direction: column;
  color: var(--Bagel-Rescue-Dark-Blue);
}

.header-text {
  font-size: 2.25em;
  font-weight: bold;
  padding: 1em;
}

.separator {
  border-top: 1px solid var(--Bagel-Rescue-Light-Grey);
}

.analytics-container {
  background: var(--Bagel-Rescue-Light-Blue);
  display: flex;
  flex-direction: column;
  width: 100%;
  padding: 1.5em;
  height: 100%;
  gap: 1.5em;
}

.analytics-subcontainer {
  display: flex;
  flex-direction: row;
  gap: 1.5em;
}

.analytics-card {
  display: flex;
  flex-direction: column;
  gap: 2em;
  background: white;
  border-radius: 16px;
  padding: 1.5em;
}

.analytics-card-title {
  font-size: 1.5em;
  font-weight: bold;
}

.overview {
  width: 40%;
}

.overview-stats {
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 2.5em;
  width: 100%;
}

.analytics-bagel-container {
  display: flex;
  flex-direction: column;
  align-items: center;
  width: 16em;
  height: 16em;
  position: relative;
}

.bagels-rescued-label {
  position: relative;
  top: 2.1em;
  z-index: 1;
  text-align: center;
}

.bagels-rescued-label-text {
  color: #673000;
  font-size: 1.25em;
  font-weight: 700;
  background-color: var(--Bagel-Rescue-Secondary-Color);
  padding: 0.1em;
  border-radius: 20px;
  display: inline-block;
}

.bagels-rescued-stat {
  display: flex;
  flex-direction: column;
  align-items: center;
  z-index: 1;
  position: relative;
  top: 3em;
}

.bagels-rescued-number {
  color: var(--Bagel-Rescue-Dark-Blue);
  font-size: 1.375em;
  font-weight: 700;
}

.bagels-rescued-stat {
  color: var(--Bagel-Rescue-Dark-Blue);
  font-size: 1.125em;
  font-weight: 700;
}

.category-overview {
  display: flex;
  flex-direction: column;
  gap: 0.5em;
  width: 100%;
}

.category-overview-title {
  font-weight: bold;
}

.category-overview-row {
  display: flex;
  flex-direction: row;
  justify-content: space-between;
}

.category-overview-card {
  display: flex;
  flex-direction: column;
  align-items: center;
  border-radius: 16px;
  border: 2px solid var(--Bagel-Rescue-Light-Blue);
  padding: 1em;
  min-width: 48%;
}

.category-overview-label {
  font-weight: 600;
}

.category-overview-statistic {
  font-weight: 700;
  font-size: 1.5em;
}

.rescue-records {
  width: 60%;
}

.rescue-records-list {
  display: flex;
  flex-direction: column;
  gap: 2em;
}

.rescue-records-section {
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 1.5em;
}

.rescue-record-title {
  font-weight: 700;
}

.rescue-record-stat-container {
  display: flex;
  flex-direction: column;
  align-items: center;
  position: relative;
}

.rescue-record-image-container {
  display: flex;
  justify-content: center;
  width: 8em;
  height: 8em;
  position: relative;
}

.rescue-record-stat-box {
  display: flex;
  flex-direction: column;
  align-items: center;
  font-weight: 700;
  padding: 1em 5em;
  border-radius: 16px;
  border: 3px solid var(--Bagel-Rescue-Light-Blue);
  position: absolute;
  background: white;
}

.rescue-record-stat {
  font-size: 1.5em;
}

.recent-shifts {
  width: 60%;
}

.leaderboard {
  width: 40%;
}

.leaderboard-header {
  display: flex;
  flex-direction: row;
  justify-content: space-between;
}

.leaderboard-stat {
  padding: 0.75em 0.5em;
  border: 1px solid var(--Bagel-Rescue-Light-Grey);
  border-radius: 12px;
}

.leaderboard-entry-name {
  display: flex;
  flex-direction: row;
  gap: 0.75em;
}

.compact-table {
  border-collapse: separate;
  border-spacing: 0;
  width: 100%;
}

.compact-table tr th {
  color: var(--Bagel-Rescue-Light-Text);
  font-size: 0.875em;
  text-align: left;
}

.compact-table tr td {
  padding: 5px;
  border-bottom: 1px solid var(--Bagel-Rescue-Light-Grey);
}

.compact-table tr td:first-child {
  border-left: 1px solid var(--Bagel-Rescue-Light-Grey);
}

.compact-table tr:first-child td {
  border-top: 1px solid var(--Bagel-Rescue-Light-Grey);
  font-weight: 700;
}

.compact-table tr td:last-child {
  border-right: 1px solid var(--Bagel-Rescue-Light-Grey);
}

.compact-table tr:first-child td:first-child {
  border-top-left-radius: 6px;
}

.compact-table tr:first-child td:last-child {
  border-top-right-radius: 6px;
}

.compact-table tr:last-child td:first-child {
  border-bottom-left-radius: 6px;
}

.compact-table tr:last-child td:last-child {
  border-bottom-right-radius: 6px;
}

.leaderboard-table {
  width: 100%;
}

.leaderboard-table th {
  text-align: left;
  color: var(--Bagel-Rescue-Light-Text);
  font-size: 0.75em;
  font-weight: 400;
}

.leaderboard-table tr {
  border-bottom: 1px solid var(--Bagel-Rescue-Light-Grey);
}

.leaderboard-table tr th {
  padding-bottom: 12px;
}

.leaderboard-table tr td {
  padding: 16px 0px;
}

.leaderboard-table tr td:first-child {
  width: 50%;
}


.big-container {
  display: flex;
  flex-direction: row; /* Ensures the sidebar and content are side by side */
}

.analytics-container {
  flex: 1; /* Allows the analytics content to take up the remaining space */
}

================
File: src/app/AdminNavView/DailyShiftDashboard/page.tsx
================
'use client'

import React, { useEffect, useState } from 'react';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faAngleDown, faAngleLeft, faAngleRight, faArrowUpShortWide, faEllipsis, faPlus, faSearch } from '@fortawesome/free-solid-svg-icons';
import { Shift } from '@/server/db/models/shift';
import { getAllShifts } from '@/server/db/actions/shift';
import { IRoute } from '@/server/db/models/Route';
import { getAllRoutesbyIds, getRoute } from '@/server/db/actions/Route';
import WeeklyShiftBar from '../../components/DailyShiftBar';
import DashboardHeader from '../../components/DailyDashboard';
import DailyShiftBar from '../../components/DailyShiftBar';
import AdminSidebar from '../../../components/AdminSidebar';

function DailyShiftDashboardPage() {

    const [search, setSearch] = useState<string>('');
    const [date, setDate] = useState<Date>(new Date());
    const [shifts, setShifts] = useState<Shift[]>([]);
    const [routes, setRoutes] = useState<{ [key: string]: IRoute }>({});

    useEffect(() => {
        const fetchShifts = async () => {
            const response = await getAllShifts();
            const data = JSON.parse(response || "[]");

            setShifts(data || []);

            const routeIds = data.map((shift: Shift) => shift.routeId);

            const routeResponse = await getAllRoutesbyIds(routeIds);
            const routeData = JSON.parse(routeResponse || "[]");
            const routeMap: { [key: string]: IRoute } = {};
            routeData.forEach((route: IRoute) => {
                routeMap[String(route._id)] = route;
            });
            setRoutes(routeMap);
        };
        fetchShifts();
    }, [date]);

    const AddDays = (e: number) => {
        const newDate = new Date(date);
        if (newDate.getDate() - new Date().getDate() !== 7 || e === -1) {
            newDate.setDate(newDate.getDate() + e);
            setDate(newDate);
        }
    };

    return (
        <div className="flex">
            <AdminSidebar />
            <div className='flex flex-col flex-1'>
                <DashboardHeader date={date} AddDays={AddDays} />
                <div className='bg-[#ECF2F9] flex flex-col pl-9 pr-9 gap-6 min-h-screen'>
                    <div className='flex justify-between text-[#6C7D93] mt-6'>
                        <div className='px-5 py-[.6rem] rounded-xl space-x-2 border bg-white'>
                            <FontAwesomeIcon icon={faArrowUpShortWide} />
                            <span>Sort by</span>
                        </div>
                        <div className='flex min-w-96 border px-5 py-[.6rem] justify-start gap-2 rounded-[2.5rem] bg-white'>
                            <FontAwesomeIcon icon={faSearch} className='mt-1' />
                            <input className='min-w-96 outline-none' type='search' onChange={(e) => { setSearch(e.target.value) }} placeholder='Search for a shift'></input>
                        </div>
                    </div>
                    <div className='flex w-full items-center border-b bg-[#82AEE15E] p-4 rounded-2xl text-[#072B68] font-[700] opacity-50'>
                        <div className='min-w-[10.25rem]'>Time</div>
                        <div className="w-full grid grid-cols-8">
                            <div className='col-span-2'>Volunteer Name</div>
                            <div className='col-span-2'>Route Name</div>
                            <div className='col-span-2'>Area</div>
                            <div className="col-span-2 text-center flex justify-around">
                                <span className='text-center md:px-10'>Status</span>
                                <FontAwesomeIcon icon={faEllipsis} className='flex-shrink mt-1 min-w-0 invisible' />
                            </div>
                        </div>
                    </div>
                    {shifts.filter((shift) => {
                        const route = routes[shift.routeId.toString()]
                        return route?.routeName.toLowerCase().includes(search.toLowerCase());
                    }).map((shift) => {
                        const route = routes[shift.routeId.toString()] || null;
                        return <React.Fragment key={shift.id}>
                            <DailyShiftBar key={shift.id} shift={shift} route={route} />
                            <hr className='border-[#7D7E82A8]' />
                        </React.Fragment>;
                    })}

                </div>
            </div>
        </div>
    );
}

export default DailyShiftDashboardPage;

================
File: src/app/AdminNavView/LocationPage/page.module.css
================
.container {
  padding: 20px;
  max-width: 1200px;
  margin: 0 auto;

}
.header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 20px;
}

.newLocationButton {
  background-color: #007bff;
  color: #fff;
  border: none;
  padding: 10px 15px;
  border-radius: 5px;
  cursor: pointer;
}

.searchAndSort {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 20px;
}

.filterControls {
  display: flex;
  gap: 10px;
  align-items: center;
}

.sortSelect {
  position: relative;
  border: 1px solid #0F7AFF;
  border-radius: 69px;
  padding: 10px 50px 10px 20px; 
}

.sortSelect select {
  width: 100%;
  border: none;
  background: transparent;
  appearance: none;
  -webkit-appearance: none;
  -moz-appearance: none;
  direction: ltr; 
  padding: 0;
  margin: 0;
  font-size: 16px;
}

.sortSelect::after {
  content: '▼';
  font-size: 12px;
  position: absolute;
  top: 52%;
  right: 20px; 
  transform: translateY(-50%);
  color: #000;
  pointer-events: none;
}


.filterButton {
  background-color: #C6E3F9;
  border: 1px solid #0F7AFF;
  padding: 10px 15px;
  border-radius: 69px;
  cursor: pointer;
}

.tableContainer {
  margin-top: 20px;
  height: 72vh;
  overflow-y: auto;
}

.tableHeader {
  display: grid;
  grid-template-columns: 2fr 1.5fr 1fr 1fr 3fr 0.5fr;
  background-color: #C6E3FF;
  border-radius: 8px;
  padding: 16px;
  font-weight: bold;
  color: #072B68;
  margin-bottom: 10px;
  padding-left: 20px;
}

.columnHeader {
  padding: 5px 10px;
}

.locationList {
  display: flex;
  flex-direction: column;
  gap: 10px;
}

.locationCard {
  background-color: #fff;
  border: 1px solid #ddd;
  border-radius: 16px;
  border-color: #C6E3FF;
  padding: 10px;
  color: #072B68;
}

.locationDetails {
  display: grid;
  grid-template-columns: 2fr 1.5fr 1fr 1fr 3fr 0.5fr;
  gap: 16px;
  align-items: center;
}

.locationInfo {
  display: flex;
  flex-direction: column;
  padding-left: 20px;
  
}

.pickUp {
  background-color: #A4F4B6;
  color: #072B68;
  padding: 5px 10px;
  border-radius: 12px;
  text-align: center;
}

.dropOff {
  background-color: #F4C6A4;
  color: #072B68;
  padding: 5px 10px;
  border-radius: 12px;
  text-align: center;
}

.moreOptionsButton {
  background: none;
  border: none;
  cursor: pointer;
  font-size: 20px;
}

.searchInputContainer {
  display: flex;
  align-items: center;
  padding-left: 20px;
  width: 300px;
  padding: 10px 15px; 
  border: 1px solid #0F7AFF;
  border-radius: 69px;
  overflow: hidden;
}

.searchIcon {
  color: #0F7AFF;
  font-size: 20px;
  width: 20px; 
  height: 20px; 
}

.searchInput {
  border: none;
  outline: none;
  background-color: transparent;
  padding-left: 10px;
  flex-grow: 1; 
}

================
File: src/app/AdminNavView/LocationPage/page.tsx
================
"use client";

import React, { useEffect, useState } from 'react';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faMagnifyingGlass } from '@fortawesome/free-solid-svg-icons';
import styles from './page.module.css';
import { faAngleDown, faAngleLeft, faAngleRight, faArrowUpShortWide, faEllipsis, faPlus, faSearch } from '@fortawesome/free-solid-svg-icons';

import { getAllLocations } from "@/server/db/actions/location";
import { Location } from "@/server/db/models/location";

import AdminSidebar from '../../../components/AdminSidebar';


function LocationDashboardPage() {
  const [locations, setLocations] = useState<Location[]>([]);
  const [sortOption, setSortOption] = useState<string>('alphabetically');


  useEffect(() => {
    const fetchLocations = async () => {
      const response = await getAllLocations();
      const data = JSON.parse(response || "[]");

      setLocations(data || []);
    };
    fetchLocations();
  }, [sortOption]);


  const handleSortChange = () => {
    const sortedLocations = [...locations];
    if (sortOption === 'alphabetically') {
      sortedLocations.sort((a: Location, b: Location) => a.locationName.localeCompare(b.locationName));
    } else if (sortOption === 'byType') {
      sortedLocations.sort((a: Location, b: Location) => {
        if (a.type === b.type) {
          return 0;
        }
        return a.type === 'Drop-Off' ? -1 : 1;
      });
    }
    setLocations(sortedLocations);
  };

  const handleFilterChange = (event: React.ChangeEvent<HTMLSelectElement>) => {
    setSortOption(event.target.value);

  };

  return (
    <div className="flex">
      <AdminSidebar />
      <div className="flex flex-col flex-1">
      <div className="container">
      <button className="back-btn"
      onClick={() => window.history.back()}>
        <FontAwesomeIcon icon={faAngleLeft} />
        <p>Back</p>
      </button>
      <div className="header">
        <p className="header-text">Locations</p>
      </div>
      <hr className="separator" />
        <div className={styles.container}>
          <div className={styles.searchAndSort}>
            <div className={styles.searchInputContainer}>
              <FontAwesomeIcon icon={faMagnifyingGlass} className={styles.searchIcon} />
              <input
                type="text"
                placeholder="Search for route"
                className={styles.searchInput}
              />
            </div>
            <div className={styles.filterControls}>
              <h1>Sorted:</h1>
              <select className={styles.sortSelect} value={sortOption} onChange={handleFilterChange}>
                <option value="alphabetically">Alphabetically</option>
                <option value="byType">By Type</option>
              </select>
              <button className={styles.filterButton} onClick={handleSortChange}>Filter</button>
            </div>
          </div>
          <div className={styles.tableContainer}>
            <div className={styles.tableHeader}>
              <div className={styles.columnHeader}>Location and Contact</div>
              <div className={styles.columnHeader}>Address</div>
              <div className={styles.columnHeader}>Type</div>
              <div className={styles.columnHeader}>Bags</div>
              <div className={styles.columnHeader}>Additional notes</div>
              <div className={styles.columnHeader}></div>
            </div>
            <div className={styles.locationList}>
              {locations.map((location, index) => (
                <div key={index} className={styles.locationCard}>
                  <div className={styles.locationDetails}>
                    <div className={styles.locationInfo}>
                      <strong>{location.locationName}</strong>
                      <div>{location.contact}</div>
                    </div>
                    <div className={styles.locationInfo}>{location.address.street + ", " + location.address.city + ", " + location.address.state + " " + location.address.zipCode}</div>
                    <div className={`${styles.locationInfo} ${location.type === 'Pick-Up' ? styles.pickUp : styles.dropOff}`}>
                      {location.type}
                    </div>
                    <div className={styles.locationInfo}>{location.bags}</div>
                    <div className={styles.locationInfo}>{location.notes}</div>
                    <button className={styles.moreOptionsButton}>⋮</button>
                  </div>
                </div>
              ))}
            </div>
          </div>
        </div>
      </div>
    </div>
    </div>
  );
};

export default LocationDashboardPage;

================
File: src/app/AdminNavView/NewShiftPage/page.tsx
================
'use client'

import "./stylesheet.css";
import AdminSidebar from "@/components/AdminSidebar";
import { getAllLocationById } from "@/server/db/actions/location";
import { createRoute, getAllRoutes, getLocations } from "@/server/db/actions/Route";
import { createShift } from "@/server/db/actions/shift";
import { Location } from "@/server/db/models/location";
import { IRoute } from "@/server/db/models/Route";
import { Shift } from "@/server/db/models/shift";
import { regular } from "@fortawesome/fontawesome-svg-core/import.macro";
import { faArrowLeft, faGripVertical, faXmark } from "@fortawesome/free-solid-svg-icons";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { ObjectId } from "mongoose";
import { useRouter } from "next/navigation";
import React, { useEffect, useRef, useState } from "react";
import { DragDropContext, Draggable, Droppable } from "react-beautiful-dnd";


export default function NewShiftPage() {
    const timeStartInputRef = useRef<HTMLInputElement>(null);
    const timeEndInputRef = useRef<HTMLInputElement>(null);
    const [searchRoutes, setSearchRoutes] = useState<IRoute[]>([]);
    const [routes, setRoutes] = useState<IRoute[]>([]);
    const [searchText, setSearchText] = useState<string>("");
    const [isAddingRoute, setIsAddingRoute] = useState<boolean>(false);
    const [locations, setLocations] = useState<Location[]>([]);
    const [day, setDay] = useState<string>("Monday");
    const [startTime, setStartTime] = useState<string>("");
    const [endTime, setEndTime] = useState<string>("");
    const [routesIsPickUp, setRoutesIsPickUp] = useState<
    Map<string, boolean>
  >(new Map());

    const router = useRouter();
    

  useEffect(() => {
    const fetchRoutes = async () => {
      const response = await getAllRoutes();
      const data = JSON.parse(response || "[]");
      setSearchRoutes(data || []);
    };
    fetchRoutes();
  }, []);

  useEffect(() => {
    const fetchLocations = async () => {
      if (routes.length === 0) return;
      const response = await getAllLocationById(routes[0].locations.map((loc) => String(loc.location)));
      const data = JSON.parse(response || "[]");
      setLocations(data || []);
    };
    fetchLocations();
  }, [routes]);

  function addRoute(index: number): void {
    const newRoutes = [...routes];
    newRoutes.push(searchRoutes[index]);
    setRoutes(newRoutes);

    const newSearchRoutes = [...searchRoutes];
    newSearchRoutes.splice(index, 1);
    setSearchRoutes(newSearchRoutes);

    setIsAddingRoute(!isAddingRoute);
  }

  function removeRoute(index: number): void {
    const newSearchRoutes = [...searchRoutes];
    newSearchRoutes.push(routes[index]);
    setSearchRoutes(newSearchRoutes);

    const newRoutes = [...routes];
    newRoutes.splice(index, 1);
    setRoutes(newRoutes);
  }
  function locationsList() {
    if (locations.length === 0) return <div></div>;
    return locations.map((loc) => {
        return (
            <div key={loc._id} className="content-center bg-blue-300 px-2 rounded-lg mr-2">
            <p className="text-[#072B68] font-bold text-xs content-center">{loc["locationName"]}</p>
            </div>
        );
    }
    );
  }


  function routesCards() {
    function handleOnDragEnd(result: any) {
      if (!result.destination) return;

      const items = Array.from(routes);
      const [reorderedItem] = items.splice(result.source.index, 1);
      items.splice(result.destination.index, 0, reorderedItem);

      setRoutes(items);
    }

    return (
      <DragDropContext onDragEnd={handleOnDragEnd}>
        <Droppable droppableId="location-cards-list">
          {(provided) => (
            <div
              className="location-cards-list"
              style={{
                display: isAddingRoute
                  ? "none"
                  : routes.length > 0
                  ? "flex"
                  : "none",
              }}
              {...provided.droppableProps}
              ref={provided.innerRef}
            >
              {routes.map((route, ind) => {
                return (
                  <Draggable
                    key={route["routeName"]}
                    draggableId={route["routeName"]}
                    index={ind}
                  >
                    {(provided) => (
                      <div
                        key={ind}
                        className={route["routeName"] + " location-card"}
                        ref={provided.innerRef}
                        {...provided.draggableProps}
                        {...provided.dragHandleProps}
                      >
                        <div className="location-card-section">
                          <FontAwesomeIcon
                            icon={faGripVertical}
                            className="drag-drop-icon"
                          />
                          <p className="location-number">{ind + 1}</p>
                          <p className="location-name">
                            {route["routeName"]}
                          </p>
                        </div>
                        <div className="location-card-section">
                          <button
                            className="x-btn"
                            onClick={() => removeRoute(ind)}
                          >
                            <FontAwesomeIcon icon={faXmark} />
                          </button>
                        </div>
                      </div>
                    )}
                  </Draggable>
                );
              })}
              {provided.placeholder}
            </div>
          )}
        </Droppable>
      </DragDropContext>
    );
  }

  function searchRoutesList() {
    return (
      <div
        className="search-location-list"
        style={{ display: isAddingRoute ? "flex" : "none" }}
      >
        {searchRoutes.map((route, ind) => {
          return (
            <div
              key={ind}
              className="search-location"
              onClick={() => addRoute(ind)}
              style={{
                display: route["routeName"]
                  .toLowerCase()
                  .includes(searchText.toLowerCase())
                  ? "flex"
                  : "none",
              }}
            >
              <div className="search-location-section">
                <p className="search-location-name">
                  {route["routeName"]}
                </p>
                <p className="search-location-address">
                  {route["locationDescription"]}
                </p>
              </div>
              <div className="search-location-section">
                <p>Data here</p>
              </div>
            </div>
          );
        })}
      </div>
    );
  }
    
  
  const handleClick = () => {
      if (timeStartInputRef.current) {
        timeStartInputRef.current.showPicker
          ? timeStartInputRef.current.showPicker()
          : timeStartInputRef.current.focus();
      }
  };

  const handleClickEnd = () => {
    if (timeEndInputRef.current) {
      timeEndInputRef.current.showPicker
        ? timeEndInputRef.current.showPicker()
        : timeEndInputRef.current.focus();
    }
  };

  function timeIntoHoursandMinutes(inputTime: string): [number, number] {
    
    const timeRegex = /^([01]?\d|2[0-3]):([0-5]\d)$/;
    const match = inputTime.match(timeRegex);

    if (!match) return [0,0]

    let [, hourStr, minuteStr, meridiem] = match;

    let hours = parseInt(hourStr, 10);
    const minutes = parseInt(minuteStr, 10);

    return [hours, minutes];
  
  }

  function saveEdits() {
    let finalStartDay = new Date(); 
    let finalEndDay = new Date();

    if (routes.length === 0) {
      alert("Please add a route.");
      return;
    }
    const selectedRoute = routes[0]._id;
    const targetDay = day.toLowerCase();

    const today = new Date();
    const todayName = today.toLocaleString("en-us", { weekday: "long" }).toLowerCase();

    if (targetDay === todayName) {
      finalStartDay = today;
      finalEndDay = today;
    }

    for (let i = 1; i < 7; i++) {
      const temp = new Date(today);
      temp.setDate(today.getDate() + i);
      if (temp.toLocaleString("en-us", { weekday: "long" }).toLowerCase() === targetDay) {
        finalStartDay = temp;
        finalEndDay = temp;
        break;
      }
    }

    const [startHour, startMinute] = timeIntoHoursandMinutes(startTime);
    const [endHour, endMinute] = timeIntoHoursandMinutes(endTime);

    if (startHour === 0 && startMinute === 0 || 
      endHour === 0 && endMinute === 0 || 
      endHour < startHour || 
      (endHour === startHour && endMinute <= startMinute)) {
      alert("Please enter a valid start time.");
      return;
    }

    finalStartDay = new Date(finalStartDay);
    finalStartDay.setHours(startHour);
    finalStartDay.setMinutes(startMinute);
    finalStartDay.setSeconds(0);

    finalEndDay = new Date(finalEndDay);
    finalEndDay.setHours(endHour);
    finalEndDay.setMinutes(endMinute);
    finalEndDay.setSeconds(0);

    const newShift = {
      routeId: selectedRoute,
      shiftDate: finalStartDay,
      shiftEndDate: finalEndDay,
      recurrenceRule: "FREQ=WEEKLY;BYDAY=" + targetDay.toUpperCase().substring(0, 2),
    };
    

    createShift(JSON.stringify(newShift));

    alert("Shift created successfully.");


  }


    
    return (
        <div className="flex min-h-screen">
            <AdminSidebar/>
            <div className="flex flex-col w-full min-h-screen">
                <div className="flex flex-col p-9 space-y-6 border border-b-[#D3D8DE]">
                    <div onClick={() => router.push("/AdminNavView/DailyShiftDashboard")} className="flex space-x-2 cursor-pointer">
                        <FontAwesomeIcon  icon={faArrowLeft} className="text-[#6C7D93] size-5 mt-[.1rem]"/>
                        <span className="font-semibold text-base text-[#6C7D93]">Back</span>
                    </div>
                    <div className="flex justify-between text-center align-middle">
                        <div className="text-[#072B68] font-bold text-4xl content-center">New Shift</div>
                        <div className="flex justify-between space-x-4">
                            <button onClick={() => router.push("/AdminNavView/DailyShiftDashboard")} className="bg-[#ECF2F9] font-bold text-[#6C7D93] px-4 py-[.8rem] rounded-xl text-base border border-[#D3D8DE]">Cancel</button>
                            <button onClick={() => saveEdits()} className="bg-[#0F7AFF] font-bold text-white px-4 py-[.8rem] rounded-xl">Save edits</button>
                        </div>
                    </div>
                </div>
                <div className="flex justify-between pt-16 px-16 bg-[#ECF2F9] space-x-16 flex-grow">
                    <div className="h-[36rem] w-full flex space-x-16">
                        <div className="flex flex-col space-y-6 w-2/5">
                            <div className="flex flex-col space-y-2">
                                <label htmlFor="day" className="text-[#072B68] font-bold text-lg">Shift Day</label>
                                <select onChange={(e) => setDay(e.target.value)} id="day" name="day" className="px-4 py-[.8rem] rounded-xl border-r-[1.25rem] border-r-transparent outline outline-[#57A0D5]">
                                    <option value="Monday">Monday</option>
                                    <option value="Tuesday">Tuesday</option>
                                    <option value="Wednesday">Wednesday</option>
                                    <option value="Thursday">Thursday</option>
                                    <option value="Friday">Friday</option>
                                    <option value="Saturday">Saturday</option>
                                    <option value="Sunday">Sunday</option>
                                </select>
                            </div>
                            <div className="flex flex-col space-y-2">
                                <p className="text-[#072B68] font-bold text-lg">Shift Start Time</p>
                                  <input onChange={(e) => setStartTime(e.target.value)} ref={timeStartInputRef} onClick={() => handleClick()} className="px-4 py-[.8rem] rounded-xl border border-[#57A0D5] h-full" type="time" placeholder="Enter additional information here"/>
                            </div>
                            <div className="flex flex-col space-y-2">
                                <p className="text-[#072B68] font-bold text-lg">Shift End Time</p>
                                  <input onChange={(e) => setEndTime(e.target.value)} ref={timeEndInputRef} onClick={() => handleClickEnd()} className="px-4 py-[.8rem] rounded-xl border border-[#57A0D5] h-full" type="time" placeholder="Enter additional information here"/>
                            </div>
                        </div>
                        <div className="flex flex-col justify-start w-3/5 space-y-2">
                            <p className="text-[#072B68] font-bold text-lg">Route</p>
                            <div className="flex flex-col justify-between px-4 py-[.8rem] rounded-xl border border-[#57A0D5] h-full bg-white">
                                    <div className="locations-box">
                                        <div
                                        className="location-input"
                                        style={{ display: isAddingRoute ? "flex" : "none" }}
                                        >
                                        <input
                                            className="field-input"
                                            type="text"
                                            placeholder="Start typing here"
                                            onChange={(e) => setSearchText(e.target.value)}
                                        />
                                        <button
                                            className="exit-add-location-btn x-btn"
                                            onClick={() => setIsAddingRoute(!isAddingRoute)}
                                        >
                                            <FontAwesomeIcon icon={faXmark} />
                                        </button>
                                        </div>
                                        {routesCards()}
                                        {searchRoutesList()}
                                        {routes.length > 0 ? <div></div>:<button
                                        className="add-location-btn"
                                        onClick={() => setIsAddingRoute(!isAddingRoute)}
                                        style={{ display: isAddingRoute ? "none" : "flex" }}
                                        >
                                        Add a Route
                                        </button>}
                                    </div>
                                
                                <div className="flex px-2 py-4 border-t-2 border-[#C6E3F9]">
                                    <h1 className="text-[#072B68] font-bold text-sm pr-2 border-r-2 border-[#57A0D5]">Route Locations</h1>
                                    <div className="flex pl-2 space-x-3">
                                        {routes.length > 0 ? <div className="flex flex-wrap">{locationsList()}</div> : (<div className="text-[#072B68] font-bold text-sm opacity-30">No locations have been selected yet.</div>)}
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    );
}

================
File: src/app/AdminNavView/NewShiftPage/stylesheet.css
================
.container {
  padding: 1.5em 4em;
}

.back-btn {
  color: var(--Bagel-Rescue-Blue);
  display: flex;
  flex-direction: row;
  align-items: center;
  gap: 0.75em;
}

.header {
  display: flex;
  flex-direction: row;
  justify-content: space-between;
  padding: 1.5em 0em;
}

.header-text {
  font-size: 2.25em;
  font-weight: bold;
}

.complete-route-btn {
  border-radius: 16px;
  background: gray;
  font-size: 1em;
  font-weight: bold;
  color: white;
  padding: 1em;
}

.separator {
  border-top: 1px solid var(--Bagel-Rescue-Light-Blue);
}

.route-creation-form {
  display: flex;
  flex-direction: row;
  margin-top: 1.5em;
  gap: 3em;
}

.route-info {
  width: 40%;
  display: flex;
  flex-direction: column;
  gap: 2em;
}

.field-container {
  display: flex;
  flex-direction: column;
  gap: 0.75em;
}

.field-title {
  font-size: 1.25em;
  font-weight: bold;
}

.field-input {
  padding: 1em;
  border-radius: 12px;
  border: 1px solid var(--Bagel-Rescue-Blue);
  width: 100%;
}

.locations {
  width: 60%;
}

.locations-box {
  border-radius: 12px;
  /* border: 1px solid var(--Bagel-Rescue-Blue); */
  height: 100%;
  display: flex;
  flex-direction: column;
  align-items: center;
  /* padding: 1em; */
  gap: 1em;
}

.location-input {
  width: 100%;
  position: relative;
}

.x-btn {
  color: red;
}

.exit-add-location-btn {
  position: absolute;
  top: 1.1em;
  right: 1em;
}

.location-cards-list {
  width: 100%;
  display: flex;
  flex-direction: column;
  gap: 1em;
  max-height: 300px;
  overflow-y: auto;
}

.location-card {
  width: 100%;
  display: flex;
  flex-direction: row;
  justify-content: space-between;
  align-items: center;
  padding: 1em;
  border-radius: 8px;
  border: 1px solid var(--Bagel-Rescue-Blue);
}

.location-card-section {
  display: flex;
  flex-direction: row;
  gap: 1em;
  align-items: center;
}

.location-number {
  border-radius: 50%;
  background: var(--Bagel-Rescue-Light-Blue);
  width: 2.25em;
  height: 2.25em;
  display: flex;
  justify-content: center;
  align-items: center;
}

.location-name {
  color: #00377a;
  font-size: 1em;
  font-weight: 700;
}

.location-pick-drop {
  border-radius: 84px;
  background: #a4f4b6;
  padding: 0.25em 0.75em;
}

.search-location-list {
  display: flex;
  flex-direction: column;
  width: 100%;
  padding: 1em;
  border-radius: 12px;
  border: 1px solid var(--Bagel-Rescue-Blue);
  width: 100%;
  gap: 1.5em;
  max-height: 300px;
  overflow-y: auto;
}

.search-location {
  display: flex;
  flex-direction: row;
  justify-content: space-between;
  cursor: pointer;
}

.search-location-name {
  font-weight: bold;
}

.add-location-btn {
  width: 100%;
  border: 1px solid var(--Bagel-Rescue-Blue);
  background: var(--Bagel-Rescue-Light-Blue);
  padding: 1em 0em;
  justify-content: center;
  align-items: center;
  border-radius: 12px;
  font-size: 1em;
  font-weight: bold;
}

================
File: src/app/AdminNavView/RouteCreationPage/page.tsx
================
"use client";

import "./stylesheet.css";
import mongoose from "mongoose";
import { useEffect, useState } from "react";
import { DragDropContext, Droppable, Draggable } from "react-beautiful-dnd";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import {
  faGripVertical,
  faAngleLeft,
  faXmark,
} from "@fortawesome/free-solid-svg-icons";

import { getAllLocations } from "@/server/db/actions/location";
import { Location } from "@/server/db/models/location";
import { ILocation } from "@/server/db/models/Route";
import { createRoute } from "@/server/db/actions/Route";
import AdminSidebar from '../../../components/AdminSidebar';

function RouteCreationPage() {
  const [routeName, setRouteName] = useState<string>("");
  const [routeArea, setRouteArea] = useState<string>("");
  const [additionalInfo, setAdditionalInfo] = useState<string>("");
  const [searchText, setSearchText] = useState<string>("");
  const [isAddingLocation, setIsAddingLocation] = useState<boolean>(false);
  const [locations, setLocations] = useState<Location[]>([]);
  const [searchLocations, setSearchLocations] = useState<Location[]>([]);
  const [locationsIsPickUp, setLocationsIsPickUp] = useState<
    Map<string, boolean>
  >(new Map());

  useEffect(() => {
    const fetchLocations = async () => {
      const response = await getAllLocations();
      const data = JSON.parse(response || "[]");
      setSearchLocations(data || []);
    };
    fetchLocations();
  }, []);

  function changeIsPickUp(locationName: string): void {
    const newIsPickUp = new Map(locationsIsPickUp);
    newIsPickUp.set(locationName, !newIsPickUp.get(locationName));
    setLocationsIsPickUp(newIsPickUp);
  }

  function addLocation(index: number): void {
    const newLocations = [...locations];
    newLocations.push(searchLocations[index]);
    setLocations(newLocations);

    const newIsPickUp = new Map(locationsIsPickUp);
    newIsPickUp.set(searchLocations[index]["locationName"], true);
    setLocationsIsPickUp(newIsPickUp);

    const newSearchLocations = [...searchLocations];
    newSearchLocations.splice(index, 1);
    setSearchLocations(newSearchLocations);

    setIsAddingLocation(!isAddingLocation);
  }

  function removeLocation(index: number): void {
    const newSearchLocations = [...searchLocations];
    newSearchLocations.push(locations[index]);
    setSearchLocations(newSearchLocations);

    const newLocations = [...locations];
    newLocations.splice(index, 1);
    setLocations(newLocations);
  }

  function completeRoute(): void {
    const locs: ILocation[] = locations.map((item) => ({
      location: new mongoose.Types.ObjectId(item["_id"]!),
      type: locationsIsPickUp.get(item["locationName"]) ? "pickup" : "dropoff",
    }));
    const route = {
      routeName: routeName,
      locationDescription: routeArea,
      locations: locs,
    };
    createRoute(JSON.stringify(route));
  }

  function locationCards() {
    function handleOnDragEnd(result: any) {
      if (!result.destination) return;

      const items = Array.from(locations);
      const [reorderedItem] = items.splice(result.source.index, 1);
      items.splice(result.destination.index, 0, reorderedItem);

      setLocations(items);
    }

    return (

      <DragDropContext onDragEnd={handleOnDragEnd}>
        <Droppable droppableId="location-cards-list">
          {(provided) => (
            <div
              className="location-cards-list"
              style={{
                display: isAddingLocation
                  ? "none"
                  : locations.length > 0
                  ? "flex"
                  : "none",
              }}
              {...provided.droppableProps}
              ref={provided.innerRef}
            >
              {locations.map((location, ind) => {
                return (
                  <Draggable
                    key={location["locationName"]}
                    draggableId={location["locationName"]}
                    index={ind}
                  >
                    {(provided) => (
                      <div
                        key={ind}
                        className={location["locationName"] + " location-card"}
                        ref={provided.innerRef}
                        {...provided.draggableProps}
                        {...provided.dragHandleProps}
                      >
                        <div className="location-card-section">
                          <FontAwesomeIcon
                            icon={faGripVertical}
                            className="drag-drop-icon"
                          />
                          <p className="location-number">{ind + 1}</p>
                          <p className="location-name">
                            {location["locationName"]}
                          </p>
                        </div>
                        <div className="location-card-section">
                          <button
                            className="location-pick-drop"
                            onClick={() =>
                              changeIsPickUp(location["locationName"])
                            }
                            style={{
                              backgroundColor: locationsIsPickUp.get(
                                location["locationName"]
                              )
                                ? "#a4f4b6"
                                : "#f4c6a4",
                            }}
                          >
                            {locationsIsPickUp.get(location["locationName"])
                              ? "Pick Up"
                              : "Drop Off"}
                          </button>
                          <button
                            className="x-btn"
                            onClick={() => removeLocation(ind)}
                          >
                            <FontAwesomeIcon icon={faXmark} />
                          </button>
                        </div>
                      </div>
                    )}
                  </Draggable>
                );
              })}
              {provided.placeholder}
            </div>
          )}
        </Droppable>
      </DragDropContext>
    );
  }

  function searchLocationsList() {
    return (
      <div
        className="search-location-list"
        style={{ display: isAddingLocation ? "flex" : "none" }}
      >
        {searchLocations.map((location, ind) => {
          return (
            <div
              key={ind}
              className="search-location"
              onClick={() => addLocation(ind)}
              style={{
                display: location["locationName"]
                  .toLowerCase()
                  .includes(searchText.toLowerCase())
                  ? "flex"
                  : "none",
              }}
            >
              <div className="search-location-section">
                <p className="search-location-name">
                  {location["locationName"]}
                </p>
                <p className="search-location-address">
                  {location["address"]["street"] +
                    ", " +
                    location["address"]["city"] +
                    ", " +
                    location["address"]["state"] +
                    " " +
                    location["address"]["zipCode"]}
                </p>
              </div>
              <div className="search-location-section">
                <p>Data here</p>
              </div>
            </div>
          );
        })}
      </div>
    );
  }

  return (
    <div className="flex">
      <AdminSidebar />
      <div className="flex flex-col flex-1">
    <div className="container">
      <button className="back-btn"
      onClick={() => window.history.back()}>
        <FontAwesomeIcon icon={faAngleLeft} />
        <p>Back</p>
      </button>
      <div className="header">
        <p className="header-text">Create a Route</p>
        <button
          className="complete-route-btn"
          onClick={completeRoute}
          style={{
            backgroundColor:
              routeName != "" && routeArea != "" && locations.length > 0
                ? "#3d97ff"
                : "#a3a3a3",
            cursor:
              routeName != "" && routeArea != "" && locations.length > 0
                ? "pointer"
                : "default",
          }}
        >
          Complete Route
        </button>
      </div>
      <hr className="separator" />
      <div className="route-creation-form">
        <div className="route-info">
          <div className="field-container">
            <p className="field-title">Route Name</p>
            <input
              className="field-input"
              type="text"
              placeholder="Add a Route Name Here"
              onChange={(e) => setRouteName(e.target.value)}
            />
          </div>
          <div className="field-container">
            <p className="field-title">Route Area</p>
            <input
              className="field-input"
              type="text"
              placeholder="ie. Atlanta, Norcross, Marietta"
              onChange={(e) => setRouteArea(e.target.value)}
            />
          </div>
          <div className="field-container">
            <p className="field-title">Additional Information</p>
            <textarea
              className="field-input"
              placeholder="Enter additional information here"
              onChange={(e) => setAdditionalInfo(e.target.value)}
            />
          </div>
        </div>
        <div className="locations field-container">
          <p className="field-title">Locations</p>
          <div className="locations-box">
            <div
              className="location-input"
              style={{ display: isAddingLocation ? "flex" : "none" }}
            >
              <input
                className="field-input"
                type="text"
                placeholder="Start typing here"
                onChange={(e) => setSearchText(e.target.value)}
              />
              <button
                className="exit-add-location-btn x-btn"
                onClick={() => setIsAddingLocation(!isAddingLocation)}
              >
                <FontAwesomeIcon icon={faXmark} />
              </button>
            </div>
            {locationCards()}
            {searchLocationsList()}
            <button
              className="add-location-btn"
              onClick={() => setIsAddingLocation(!isAddingLocation)}
              style={{ display: isAddingLocation ? "none" : "flex" }}
            >
              Add a Location
            </button>
          </div>
        </div>
      </div>
    </div>
    </div>
    </div>
  );
}

export default RouteCreationPage;

================
File: src/app/AdminNavView/RouteCreationPage/stylesheet.css
================
.container {
  padding: 1.5em 4em;
}

.back-btn {
  color: var(--Bagel-Rescue-Blue);
  display: flex;
  flex-direction: row;
  align-items: center;
  gap: 0.75em;
}

.header {
  display: flex;
  flex-direction: row;
  justify-content: space-between;
  padding: 1.5em 0em;
}

.header-text {
  font-size: 2.25em;
  font-weight: bold;
}

.complete-route-btn {
  border-radius: 16px;
  background: gray;
  font-size: 1em;
  font-weight: bold;
  color: white;
  padding: 1em;
}

.separator {
  border-top: 1px solid var(--Bagel-Rescue-Light-Blue);
}

.route-creation-form {
  display: flex;
  flex-direction: row;
  margin-top: 1.5em;
  gap: 3em;
}

.route-info {
  width: 40%;
  display: flex;
  flex-direction: column;
  gap: 2em;
}

.field-container {
  display: flex;
  flex-direction: column;
  gap: 0.75em;
}

.field-title {
  font-size: 1.25em;
  font-weight: bold;
}

.field-input {
  padding: 1em;
  border-radius: 12px;
  border: 1px solid var(--Bagel-Rescue-Blue);
  width: 100%;
}

.locations {
  width: 60%;
}

.locations-box {
  border-radius: 12px;
  border: 1px solid var(--Bagel-Rescue-Blue);
  height: 100%;
  display: flex;
  flex-direction: column;
  align-items: center;
  padding: 1em;
  gap: 1em;
}

.location-input {
  width: 100%;
  position: relative;
}

.x-btn {
  color: red;
}

.exit-add-location-btn {
  position: absolute;
  top: 1.1em;
  right: 1em;
}

.location-cards-list {
  width: 100%;
  display: flex;
  flex-direction: column;
  gap: 1em;
  max-height: 300px;
  overflow-y: auto;
}

.location-card {
  width: 100%;
  display: flex;
  flex-direction: row;
  justify-content: space-between;
  align-items: center;
  padding: 1em;
  border-radius: 8px;
  border: 1px solid var(--Bagel-Rescue-Blue);
}

.location-card-section {
  display: flex;
  flex-direction: row;
  gap: 1em;
  align-items: center;
}

.location-number {
  border-radius: 50%;
  background: var(--Bagel-Rescue-Light-Blue);
  width: 2.25em;
  height: 2.25em;
  display: flex;
  justify-content: center;
  align-items: center;
}

.location-name {
  color: #00377a;
  font-size: 1em;
  font-weight: 700;
}

.location-pick-drop {
  border-radius: 84px;
  background: #a4f4b6;
  padding: 0.25em 0.75em;
}

.search-location-list {
  display: flex;
  flex-direction: column;
  width: 100%;
  padding: 1em;
  border-radius: 12px;
  border: 1px solid var(--Bagel-Rescue-Blue);
  width: 100%;
  gap: 1.5em;
  max-height: 300px;
  overflow-y: auto;
}

.search-location {
  display: flex;
  flex-direction: row;
  justify-content: space-between;
  cursor: pointer;
}

.search-location-name {
  font-weight: bold;
}

.add-location-btn {
  width: 100%;
  border: 1px solid var(--Bagel-Rescue-Blue);
  background: var(--Bagel-Rescue-Light-Blue);
  padding: 1em 0em;
  justify-content: center;
  align-items: center;
  border-radius: 12px;
  font-size: 1em;
  font-weight: bold;
}

================
File: src/app/AdminNavView/WeeklyShiftDashboard/page.tsx
================
"use client";

import "./stylesheet.css";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import {
  faArrowUpShortWide,
  faMagnifyingGlass,
  faEllipsis,
} from "@fortawesome/free-solid-svg-icons";
import { useEffect, useState } from "react";

import { Shift } from "@/server/db/models/shift";
import { IRoute } from "@/server/db/models/Route";
import { getAllShifts } from "@/server/db/actions/shift";
import { getAllRoutes } from "@/server/db/actions/Route";
import DashboardHeader from '../../components/DailyDashboard';
import AdminSidebar from '../../../components/AdminSidebar';

function WeeklyShiftDashboard() {
  const [shiftSearchText, setShiftSearchText] = useState("");
  const [routes, setRoutes] = useState<IRoute[]>([]);
  const [shiftsPerRoute, setShiftsPerRoute] = useState<Map<string, Shift[]>>(
    new Map()
  );

  useEffect(() => {
    const fetchRoutes = async () => {
      const routes_response = await getAllRoutes();
      const routes_data = JSON.parse(routes_response || "[]");
      setRoutes(routes_data || []);
    };

    const fetchShifts = async () => {
      const shift_response = await getAllShifts();
      const shift_data: Shift[] = JSON.parse(shift_response || "[]");
      const routeToShiftsMap = new Map<string, Shift[]>();
      shift_data.forEach((s) => {
        if (routeToShiftsMap.has(s["routeId"].toString())) {
          routeToShiftsMap.get(s["routeId"].toString())?.push(s);
        } else {
          routeToShiftsMap.set(s["routeId"].toString(), [s]);
        }
      });
      setShiftsPerRoute(routeToShiftsMap);
    };

    fetchRoutes();
    fetchShifts();
  }, []);

  const [date, setDate] = useState<Date>(new Date());

  const AddDays = (e: number) => {
    const newDate = new Date(date);
    if (newDate.getDate() - new Date().getDate() !== 7 || e === -1) {
      newDate.setDate(newDate.getDate() + e);
      setDate(newDate);
    }
  };

  function routesList() {
    return (
      <div className="routes-list">
        {routes.map((route, routeInd) => {
          const getTimesHeader = (r: IRoute) => {
            const dates = getDatesHelper(r)
              .flat()
              .sort((a: Date, b: Date) => {
                return a.toTimeString().localeCompare(b.toTimeString());
              });
            if (dates.length == 0) return "";
            const minTime = dates.at(0);
            const maxTime = dates.at(dates.length - 1);
            const options: Intl.DateTimeFormatOptions = {
              hour: "numeric",
              minute: "2-digit",
              hour12: true,
            };
            return (
              minTime?.toLocaleTimeString("en-US", options) +
              " - " +
              maxTime?.toLocaleTimeString("en-US", options)
            );
          };

          const getDaysHeader = (r: IRoute) => {
            return getDatesHelper(r)
              .flat()
              .sort((a: Date, b: Date) => a.getDay() - b.getDay())
              .map((d: Date) => {
                return d.toLocaleDateString("en-US", {
                  weekday: "short",
                });
              })
              .join(", ");
          };

          const getVolunteers = (r: IRoute) => {
            return (
              shiftsPerRoute
                .get(r["_id"].toString())
                ?.map((s) => "Volunteer") || []
            );
          };

          const getDays = (r: IRoute) => {
            return getDatesHelper(r).map((s: Date[]) => {
              return (
                s
                  .sort((a, b) => a.getDay() - b.getDay())
                  .map((d) => {
                    return d.toLocaleDateString("en-US", {
                      weekday: "short",
                    });
                  })
                  .join(", ") || "-"
              );
            });
          };

          const getDatesHelper = (r: IRoute) => {
            return (
              shiftsPerRoute.get(r["_id"].toString())?.map((s) => {
                const today = new Date();
                today.setHours(0, 0, 0, 0);
                const nextWeek = new Date(today);
                nextWeek.setDate(today.getDate() + 7);
                return s["recurrences"]
                  .filter((r) => {
                    const recurrenceDate = new Date(r["date"]);
                    return recurrenceDate >= today && recurrenceDate < nextWeek;
                  })
                  .map((r) => {
                    return new Date(r["date"]);
                  });
              }) || []
            );
          };

          const getAreas = (r: IRoute) => {
            return (
              shiftsPerRoute.get(r["_id"].toString())?.map((s) => "Area") || []
            );
          };

          const getNextShifts = (r: IRoute) => {
            return (
              shiftsPerRoute.get(r["_id"].toString())?.map((s) => {
                const firstShift = s["recurrences"]
                  .sort(
                    (a, b) =>
                      new Date(a["date"]).getTime() -
                      new Date(b["date"]).getTime()
                  )
                  .at(0);
                const options: Intl.DateTimeFormatOptions = {
                  year: "numeric",
                  month: "2-digit",
                  day: "2-digit",
                };
                return firstShift
                  ? new Intl.DateTimeFormat("en-US", options).format(
                      new Date(firstShift["date"])
                    )
                  : "-";
              }) || []
            );
          };

          return (
            <div key={routeInd} className="route-card">
              <div className="route-card-header">
                <p className="route-card-name">{route["routeName"]}</p>
                <div className="route-card-header-right-section">
                  <p className="route-card-time">
                    {getTimesHeader(route)} {getDaysHeader(route)}
                  </p>
                  <button>
                    <FontAwesomeIcon
                      icon={faEllipsis}
                      className="route-card-ellipsis-icon"
                    />
                  </button>
                </div>
              </div>
              <div className="route-card-body">
                <div className="route-card-section">
                  <p className="route-card-section-header">Volunteer</p>
                  {getVolunteers(route).map((s, sInd) => (
                    <p key={sInd} className="route-card-section-body">
                      {s}
                    </p>
                  ))}
                </div>
                <div className="route-card-section">
                  <p className="route-card-section-header">Days</p>
                  {getDays(route).map((s, sInd) => (
                    <p key={sInd} className="route-card-section-body">
                      {s}
                    </p>
                  ))}
                </div>
                <div className="route-card-section">
                  <p className="route-card-section-header">Area</p>
                  {getAreas(route).map((s, sInd) => (
                    <p key={sInd} className="route-card-section-body">
                      {s}
                    </p>
                  ))}
                </div>
                <div className="route-card-section">
                  <p className="route-card-section-header">Next Shift</p>
                  {getNextShifts(route).map((s, sInd) => (
                    <p key={sInd} className="route-card-section-body">
                      {s}
                    </p>
                  ))}
                </div>
              </div>
            </div>
          );
        })}
      </div>
    );
  }

  return (
    <div className="flex">
      <AdminSidebar />
      <div className='flex flex-col flex-1'>
        <DashboardHeader date={date} AddDays={AddDays} />
        <div className="container">
          <div style={{ height: "50px" }}></div>
          <div className="search-settings">
            <button className="sort-by-btn">
              <FontAwesomeIcon icon={faArrowUpShortWide} />
              <p>Sort By</p>
            </button>
            <input
              className="shift-search-input"
              type="text"
              placeholder="Search for a shift"
              onChange={(e) => setShiftSearchText(e.target.value)}
            />
            <FontAwesomeIcon
              icon={faMagnifyingGlass}
              className="shift-search-icon"
            />
          </div>
          {routesList()}
        </div>
      </div>
    </div>
  );
}

export default WeeklyShiftDashboard;

================
File: src/app/AdminNavView/WeeklyShiftDashboard/stylesheet.css
================
.container {
  padding: 1.5em 4em;
  background-color: var(--Bagel-Rescue-Light-Blue);
  display: flex;
  flex-direction: column;
  gap: 1.5em;
  min-height: 100vh;
}

.search-settings {
  display: flex;
  flex-direction: row;
  justify-content: space-between;
  position: relative;
}

.sort-by-btn {
  display: flex;
  flex-direction: row;
  gap: 0.5em;
  justify-content: center;
  align-items: center;
  background-color: white;
  color: var(--Bagel-Rescue-Light-Text);
  padding: 0.75em 1em;
  border: 1px solid var(--Bagel-Rescue-Light-Grey);
  border-radius: 12px;
}

.shift-search-input {
  padding: 1em 0.75em 1em 3em;
  border-radius: 40px;
  border: 1px solid var(--Bagel-Rescue-Light-Grey);
  width: 400px;
}

.shift-search-icon {
  position: absolute;
  right: 365px;
  top: 50%;
  transform: translateY(-50%);
  pointer-events: none;
  color: var(--Bagel-Rescue-Light-Text);
}

.routes-list {
  border-radius: 8px;
  background-color: white;
  border: 1px solid var(--Bagel-Rescue-Light-Grey);
}

.route-card {
  display: flex;
  flex-direction: column;
  gap: 1em;
  border-bottom: 1px solid var(--Bagel-Rescue-Light-Grey);
  padding: 1.25em 1.5em;
}

.route-card:last-child {
  border-bottom: none;
}

.route-card-header {
  display: flex;
  flex-direction: row;
  justify-content: space-between;
}

.route-card-name {
  color: var(--Bagel-Rescue-Dark-Blue);
  font-weight: bold;
}

.route-card-header-right-section {
  display: flex;
  flex-direction: row;
  align-items: center;
  gap: 0.75em;
}

.route-card-time {
  color: var(--Bagel-Rescue-Dark-Blue);
}

.route-card-ellipsis-icon {
  color: var(--Bagel-Rescue-Light-Text);
}

.route-card-body {
  display: flex;
  flex-direction: row;
  justify-content: space-between;
}

.route-card-section {
  display: flex;
  flex-direction: column;
  gap: 0.625em;
}

.route-card-section:not(:last-child) {
  flex: 1;
}

.route-card-section:last-child {
  min-width: 8em;
}

.route-card-section-header {
  font-size: 0.75em;
  font-weight: bold;
}

================
File: src/app/components/DailyDashboard.tsx
================
import React, { useCallback, useState } from "react";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import {
  faAngleDown,
  faAngleLeft,
  faAngleRight,
  faPlus,
} from "@fortawesome/free-solid-svg-icons";
import { useRouter } from "next/navigation";

interface DashboardHeaderProps {
  date: Date;
  AddDays: (days: number) => void;
}

const DashboardHeader: React.FC<DashboardHeaderProps> = ({ date, AddDays }) => {
  const router = useRouter();
  const [dropdownOpen, setDropdownOpen] = useState(false);
  const [timeFrame, setTimeFrame] = useState("Day");

    const handleTimeFrameChange = (newTimeFrame: string) => {
        setTimeFrame(newTimeFrame);
        if (newTimeFrame === 'Day') {
            router.push('/AdminNavView/DailyShiftDashboard');
        } else {
            router.push('/AdminNavView/WeeklyShiftDashboard');
        }
    };

  const debouncedAddDays = useCallback(debounce(AddDays, 300), [AddDays]);

  return (
    <div className="flex flex-row justify-between p-9 border-b-[1px] border-b-[#D3D8DE]">
      <span className="text-[#072B68] mt-2 font-[700] text-4xl">Dashboard</span>
      <div className="flex gap-6">
        <div className="flex justify-between gap-4">
          <div className="flex border justify-between p-[.8rem] px-4 rounded-xl gap-5">
            <button title="adddays" onClick={() => debouncedAddDays(-1)}>
              <FontAwesomeIcon
                icon={faAngleLeft}
                className="mt-1 cursor-pointer"
              />
            </button>
            <span className="font-[700]">
              {date.toLocaleDateString("en-us", {
                month: "long",
                day: "2-digit",
                year: "numeric",
              })}
            </span>
            <button title="adddays" onClick={() => debouncedAddDays(1)}>
              <FontAwesomeIcon
                icon={faAngleRight}
                className="mt-1 cursor-pointer"
              />
            </button>
          </div>
          <div className="flex border justify-between p-[.8rem] px-4 rounded-xl relative">
            <button
              onClick={() => setDropdownOpen(!dropdownOpen)}
              className="mr-6 flex items-center"
            >
              {timeFrame}
              <FontAwesomeIcon icon={faAngleDown} className="ml-2 mt-1" />
            </button>
            {dropdownOpen && (
              <div className="absolute top-full mt-2 bg-white border rounded shadow-lg">
                {timeFrame === "Day" ? (
                  <>
                    <div
                      onClick={() => handleTimeFrameChange("Day")}
                      className="px-4 py-2 hover:bg-gray-200 cursor-pointer"
                    >
                      Day
                    </div>
                    <div
                      onClick={() => handleTimeFrameChange("Week")}
                      className="px-4 py-2 hover:bg-gray-200 cursor-pointer"
                    >
                      Week
                    </div>
                  </>
                ) : (
                  <>
                    <div
                      onClick={() => handleTimeFrameChange("Week")}
                      className="px-4 py-2 hover:bg-gray-200 cursor-pointer"
                    >
                      Week
                    </div>
                    <div
                      onClick={() => handleTimeFrameChange("Day")}
                      className="px-4 py-2 hover:bg-gray-200 cursor-pointer"
                    >
                      Day
                    </div>
                  </>
                )}
              </div>
            )}
          </div>
        </div>
        <div 
          className="bg-[#0F7AFF] text-[#FFFFFF] font-[700] p-[.8rem] px-5 gap-2 rounded-xl hover:bg-[#005bb5] cursor-pointer"
          onClick={() => router.push('/AdminNavView/NewShiftPage')}
        >
          <FontAwesomeIcon icon={faPlus} className="mr-3" />
          <span>New Shift</span>
        </div>
      </div>
    </div>
  );
};

export default DashboardHeader;

function debounce(func: (...args: any[]) => void, wait: number) {
  let timeout: NodeJS.Timeout;
  return (...args: any[]) => {
    clearTimeout(timeout);
    timeout = setTimeout(() => func(...args), wait);
  };
}

================
File: src/app/components/DailyShiftBar.tsx
================
"use client";
import { faEllipsis } from "@fortawesome/free-solid-svg-icons";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import React from "react";
import { Shift } from "@/server/db/models/shift";
import { IRoute } from "@/server/db/models/Route";

function DailyShiftBar({
  key,
  shift,
  route,
}: {
  key: string;
  shift: Shift;
  route: IRoute;
}) {
  const routeName = route ? route.routeName : null;
  let shiftDate =
    new Date(shift.shiftDate).toLocaleTimeString("en-us", {
      hour: "2-digit",
      minute: "2-digit",
    }) + " - ";
  const shiftEndDate = new Date(shift.shiftEndDate).toLocaleTimeString(
    "en-us",
    { hour: "2-digit", minute: "2-digit" }
  );
  shiftDate = shiftDate + shiftEndDate;

  const volunteerdivs = () => {
    const divs = [];
    for (let i = 0; i < shift.currSignedUp; i++) {
      if (i === 0) {
        divs.push(
          <div className="grid grid-cols-8 pl-5 pr-4 py-5 border-[#7D7E82A8] border-opacity-65 border-t rounded-[.625rem] items-center">
            <div className="col-span-2">Volunteer Name</div>
            <div className="col-span-2">{routeName}</div>
            <div className="col-span-2">{`Atlanta`}</div>
            <div className="col-span-1 md:col-span-2 text-center flex flex-auto justify-around items-center w-full md:min-w-0 space-x-2">
              <button className="bg-[#D3D8DE] flex-shrink py-2 md:px-7 text-center rounded-[2.75rem] font-[600] opacity-60 text-[#072B68]">{`incomplete`}</button>
              <FontAwesomeIcon
                icon={faEllipsis}
                className="flex-shrink mt-1 min-w-0"
              />
            </div>
          </div>
        );
      }
      divs.push(
        <div className="grid grid-cols-8 pl-5 pr-4 py-5 border-[#7D7E82A8] border-opacity-65 border-t items-center">
          <div className="col-span-2">Volunteer Name</div>
          <div className="col-span-2">{routeName}</div>
          <div className="col-span-2">{`Atlanta`}</div>
          <div className="col-span-1 md:col-span-2 text-center flex flex-auto justify-around items-center w-full md:min-w-0 space-x-2">
            <button className="bg-[#D3D8DE] flex-shrink py-2 md:px-7 text-center rounded-[2.75rem] font-[600] opacity-60 text-[#072B68]">{`incomplete`}</button>
            <FontAwesomeIcon
              icon={faEllipsis}
              className="flex-shrink mt-1 min-w-0"
            />
          </div>
        </div>
      );
    }
    return divs;
  };

  return (
    <div className="flex w-full items-center">
      <div className="col-span-1 font-[700] text-xl max-w-36 ml-4 text-[#072B68]">
        {shiftDate}
      </div>
      <div className="rounded-[.625rem] w-full bg-white border-x border-b border-[#7D7E82A8] border-opacity-65">
        {volunteerdivs()}
      </div>
    </div>
  );
}

export default DailyShiftBar;

================
File: src/app/Login/BackButton.tsx
================
import { MouseEventHandler } from "react";

interface Props {
  onClick?: MouseEventHandler<HTMLButtonElement>;
  disabled?: boolean;
  darkerColor?: boolean;
}

export default function BackButton({ onClick, disabled, darkerColor }: Props) {
  return (
    <button
      className={`group flex items-center gap-[2px] text-base font-normal ${!darkerColor ? "text-medium-gray" : "text-primary-text font-semibold"}`}
      onClick={onClick}
      disabled={disabled}
    >
      <svg
        xmlns="http://www.w3.org/2000/svg"
        width="24"
        height="24"
        viewBox="0 0 24 24"
        fill="none"
      >
        <path
          d="M15 18L9 12L15 6"
          className={`${!darkerColor ? "stroke-medium-gray" : "stroke-primary-text group-hover:stroke-dark-gray"} ${disabled ? "stroke-dark-gray" : "group-hover:stroke-dark-gray"}`}
          strokeWidth="3"
          strokeLinecap="square"
          strokeLinejoin="round"
        />
      </svg>
      <div
        className={`${disabled ? "text-dark-gray" : "group-hover:text-dark-gray"}`}
      >
        Back
      </div>
    </button>
  );
}

================
File: src/app/Login/Button.tsx
================
interface Props {
    text: string;
    type?: "primary" | "secondary" | "tertiary" | "Google";
    onClick?: () => any;
    submit?: boolean;
    icon?: React.ReactNode;
    disabled?: boolean;
    width?: string | number;
  }
  
  export default function Button({
    text,
    type = "primary",
    onClick,
    width,
    disabled = false,
    submit = false,
    icon = undefined,
  }: Props) {
    let styles = "";
  
    if (disabled) {
      styles =
        "text-base font-opensans text-icon-gray border border-icon-gray px-4 pt-2 pb-[0.5625rem] rounded gap-2";
    } else if (type === "Google") {
      styles =
        "w-60 text-primary-text font-opensans text-start text-sm sm:text-base";
    } else {
      styles = `text-mbb-pink px-4 pt-2 pb-[0.5625rem] text-base font-opensans border-mbb-pink rounded gap-2 hover:bg-mbb-pink-hover active:bg-mbb-pink active:text-white active:stroke-white`;
      if (type === "primary") {
        styles += " border";
      } else if (type === "tertiary") {
        styles +=
          " pl-0 hover:bg-transparent hover:font-bold active:text-mbb-pink/60 active:bg-transparent";
      }
    }
  
    return (
      <button
        onClick={onClick}
        className={`flex w-full items-center justify-center font-semibold ${styles}`}
        disabled={disabled}
        type={submit ? "submit" : "button"}
        style={{ width }}
        title={text}
      >
        {icon ? <span>{icon}</span> : null}
        {type === "Google" && (
          <div className="flex justify-end w-1/5 -ml-8">
            <img
              src="/GoogleImage.png"
              className="w-full h-auto object-contain"
            />
          </div>
        )}
        <span className="line-clamp-1">{text}</span>
      </button>
    );
  }

================
File: src/app/Login/ErrorText.tsx
================
interface Props {
    error?: string;
  }
  
  export default function ErrorText({ error }: Props) {
    return (
      <>
        {error ? (
          <div className="text-sm font-normal text-error-red mt-[0.3125rem]">
            {error}
          </div>
        ) : (
          <div className="mt-[1.5625rem]"></div>
        )}
      </>
    );
  }

================
File: src/app/Login/HalfScreen.tsx
================
import BackButton from "./BackButton";

interface Props {
  caregiver?: boolean;
  backButtonFunction?: (value: any) => void;
  hiddenOnMobile?: boolean;
}

export default function HalfScreen({
  caregiver = false,
  backButtonFunction = undefined,
  hiddenOnMobile = false,
}: Props) {
  return (
    <div
      style={{ background: '#D6E9FF' }}
      className={`${hiddenOnMobile ? "hidden sm:flex" : "flex"} flex-col w-full h-[20%] justify-center items-center sm:w-1/2 sm:h-full`}
    >
      {backButtonFunction && (
        <div className="flex sm:hidden flex-start w-[90%] mt-2 -mb-5">
          <BackButton darkerColor={true} onClick={backButtonFunction} />
        </div>
      )}
      <div className="flex flex-col w-full justify-center items-center shrink-0 text-black text-center font-opensans tracking-wide">
        <p className="hidden sm:flex font-bold uppercase text-3xl sm:text-4xl">
          Bagel <br /> Rescue
        </p>
      </div>
    </div>
  );
}

================
File: src/app/Login/page.tsx
================
"use client";

import { useRouter } from "next/navigation";
import React, { useState } from "react";
import { useForm } from "react-hook-form";

import { loginWithCredentials, loginWithGoogle } from "../../server/db/actions/Login";

import HalfScreen from "./HalfScreen";
import Button from "./Button";
import TextInput from "./TextInput";
//import Banner from "@components/molecules/Banner";

export default function LoginScreen() {
  const router = useRouter();
  const { register, formState, trigger, getValues } = useForm<{
    email: string;
    password: string;
  }>();
  const [errorBannerMsg, setErrorBannerMsg] = useState("");

  return (
    <div className="flex absolute bg-white">
      <div className="h-screen w-screen">
        <div className="flex flex-col w-full h-full sm:flex-row">
          <HalfScreen />
          <div className="flex flex-col w-full h-full justify-center items-center mt-8 sm:mt-0 sm:w-1/2">
            <div className={`flex flex-col w-[90%] sm:w-[60%] sm:items-center`}>
              {/* {errorBannerMsg && (
                <div className="hidden sm:inline">
                  <Banner text={errorBannerMsg} />
                </div>
              )} */}
              <p
                className={`text-primary-text text-2xl font-bold font-opensans mb-10 sm:order-1`}
              >
                Log In
              </p>
              {/* {errorBannerMsg && (
                <div className="inline -mt-8 sm:hidden sm:mt-0">
                  <Banner text={errorBannerMsg} />
                </div>
              )} */}
              <div className="flex flex-col w-full sm:order-2">
                <div className="sm:mb-6">
                  <TextInput
                    label="Email"
                    formValue={register("email", {
                      validate: (v) =>
                        !v ? "Email cannot be empty." : undefined,
                    })}
                    error={formState.errors.email?.message}
                  />
                </div>
                <TextInput
                  label="Password"
                  inputType="password"
                  formValue={register("password", {
                    validate: (v) =>
                      !v ? "Password cannot be empty." : undefined,
                  })}
                  error={formState.errors.password?.message}
                />
                <div className="flex justify-end mb-9 sm:mb-10">
                  <button
                    className="w-auto text-center text-mbb-pink text-sm font-semibold font-opensans"
                    onClick={() => {
                      const email = getValues().email;

                      router.push(
                        email
                          ? `/forgotPassword?email=${encodeURIComponent(email)}`
                          : "/forgotPassword"
                      );
                    }}
                  >
                    Forgot Password
                  </button>
                </div>
                <div className="mb-5 sm:mb-7">
                  <Button
                    text="Log In"
                    onClick={async () => {
                      setErrorBannerMsg("");
                      const isValid = await trigger(undefined, {
                        shouldFocus: true,
                      });
                      if (!isValid) return;

                      const { email, password } = getValues();
                      try {
                        const res = await loginWithCredentials(email, password);

                        if (res.success) {
                          // Push to a generic route, let middleware handle role-based redirection
                          router.push("/AdminNavView/WeeklyShiftDashboard");
                        } else {
                          setErrorBannerMsg("error" in res ? res.error : "");
                        }
                      } catch (err) {
                        console.error(err);
                        setErrorBannerMsg(
                          "An unknown error ocurred logging in. Check your internet connection."
                        );
                      }
                    }}
                  />
                </div>
                <div className="mb-10 flex justify-center items-center">
                </div>
                <div className="flex flex-row justify-center mb-8 sm:mb-0">
                  <div className="text-light-black text-base font-normal font-opensans leading-tight tracking-tight mr-2">
                    Don&apos;t have an account?&nbsp;
                    <button
                      className="text-mbb-pink text-base font-semibold underline"
                      onClick={() => router.push("/signup")}
                    >
                      Sign up now
                    </button>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

================
File: src/app/Login/TextInput.tsx
================
import React, { ReactNode, useState } from "react";
import ErrorText from "./ErrorText";

interface Props {
  label?: ReactNode;
  disabled?: boolean;
  onChange?: (value: string) => void;
  formValue?: Record<string, any>;
  currentValue?: string;
  placeholder?: string;
  error?: string;
  inputType?: string;
  key?: string;
  required?: boolean;
}

export default function TextInput({
  label = "",
  disabled = false,
  onChange,
  formValue = {},
  currentValue = "",
  placeholder = "",
  error = "",
  inputType = "text",
  key = "",
  required = false,
}: Props) {
  const [value, setValue] = useState(currentValue);

  return (
    <div className="flex flex-col w-full">
      {label && (
        <label
          className="text-black text-base font-normal leading-normal"
          htmlFor={formValue ? formValue.name : undefined}
        >
          {label}
          {required && <span className="text-asterisks-red text-sm">*</span>}
        </label>
      )}
      <input
        key={key}
        type={inputType}
        {...formValue}
        className={`w-full py-2.5 px-2 bg-secondary-background items-center border rounded ${disabled ? "!bg-light-gray" : "!bg-secondary-background"} ${error ? "border-error-red" : "border-light-gray"}`}
        onClick={(event) => {
          event.stopPropagation();
        }}
        onChange={(event) => {
          setValue(event.target.value);
          if (onChange) {
            onChange(event.target.value);
          }
        }}
        placeholder={placeholder}
        value={value}
      />
      <ErrorText error={error} />
    </div>
  );
}

================
File: src/app/VolunteerNavView/Analytics/page.module.css
================
.container {
    display: flex;
    height: 100vh;
  }
  
  .sidebar {
    width: 250px;
  }
  
  .mainContent {
    flex: 1;
    padding: 2rem;
  }
  
  .header {
    display: flex;
    flex-direction: column; 
    align-items: flex-start; 
    gap: 0.5rem;
    margin-bottom: 1rem;
  }
  
  .backButton {
    background: none;
    border: none;
    font-size: 1rem;
    color: #64748B; 
    cursor: pointer;
    display: flex;
    align-items: center;
    gap: 4px; 
  }

  .arrow {
    font-size: 1rem;
  }
  
  .pageTitle {
    margin: 0;
    font-size: 1.5rem;
    font-weight: 600; 
    color: #000000;
  }

================
File: src/app/VolunteerNavView/Analytics/page.tsx
================
"use client";

import Sidebar from "../../../components/Sidebar";
import styles from "./page.module.css";

const Analytics: React.FC = () => {
  return (
    <div className={styles.container}>
      <Sidebar />

      <div className={styles.mainContent}>
        <div className={styles.header}>
          <button
            className={styles.backButton}
            onClick={() => window.history.back()}
          >
            &lt; Back
          </button>
          <h1 className={styles.pageTitle}>Analytics</h1>
        </div>
      </div>
    </div>
  );
};

export default Analytics;

================
File: src/app/VolunteerNavView/Homepage/page.module.css
================
.container {
    display: flex;
    height: 100vh;
  }
  
  .sidebar {
    width: 250px;
  }
  
  .mainContent {
    flex: 1;
    padding: 2rem;
  }
  
  .header {
    display: flex;
    flex-direction: column; 
    align-items: flex-start; 
    gap: 0.5rem;
    margin-bottom: 1rem;
  }
  
  .backButton {
    background: none;
    border: none;
    font-size: 1rem;
    color: #64748B; 
    cursor: pointer;
    display: flex;
    align-items: center;
    gap: 4px; 
  }

  .arrow {
    font-size: 1rem;
  }
  
  .pageTitle {
    margin: 0;
    font-size: 1.5rem;
    font-weight: 600; 
    color: #000000;
  }

================
File: src/app/VolunteerNavView/Homepage/page.tsx
================
"use client";

import Sidebar from "../../../components/Sidebar";
import styles from "./page.module.css";

const Homepage: React.FC = () => {
  return (
    <div className={styles.container}>
      <Sidebar />

      <div className={styles.mainContent}>
        <div className={styles.header}>
          <h1 className={styles.pageTitle}>Homepage</h1>
        </div>
      </div>
    </div>
  );
};

export default Homepage;

================
File: src/app/VolunteerNavView/MyShifts/page.module.css
================
.container {
    display: flex;
    height: 100vh;
  }
  
  .sidebar {
    width: 250px;
  }
  
  .mainContent {
    flex: 1;
    padding: 2rem;
  }
  
  .header {
    display: flex;
    flex-direction: column; 
    align-items: flex-start; 
    gap: 0.5rem;
    margin-bottom: 1rem;
  }
  
  .backButton {
    background: none;
    border: none;
    font-size: 1rem;
    color: #64748B; 
    cursor: pointer;
    display: flex;
    align-items: center;
    gap: 4px; 
  }

  .arrow {
    font-size: 1rem;
  }
  
  .pageTitle {
    margin: 0;
    font-size: 1.5rem;
    font-weight: 600; 
    color: #000000;
  }

================
File: src/app/VolunteerNavView/MyShifts/page.tsx
================
"use client";

import Sidebar from "../../../components/Sidebar";
import styles from "./page.module.css";

const MyShifts: React.FC = () => {
  return (
    <div className={styles.container}>
      <Sidebar />

      <div className={styles.mainContent}>
        <div className={styles.header}>
          <h1 className={styles.pageTitle}>My Shifts</h1>
        </div>
      </div>
    </div>
  );
};

export default MyShifts;

================
File: src/app/VolunteerNavView/Profile/page.module.css
================
.container {
    display: flex;
    min-height: 100vh;
    box-sizing: border-box;
  }
  
  .sidebar {
    width: 250px;
    height: 100vh;
  }
  
  .mainContent {
    padding-left: 2rem;
    padding-top: 1.5rem;
    padding-bottom: 1.5rem;
    background-color: #FFFFFF;
    border-bottom: 1px solid #E5E7EB;
    flex-wrap: wrap;
  }
  
  .layout {
    display: flex;
    flex-direction: column;
    flex: auto;
  }

  .header {
    display: flex;
    flex-direction: column; 
    align-items: flex-start; 
    gap: 0.5rem;
    margin-top: .7rem;
  }
  
  .backButton {
    background: none;
    border: none;
    font-size: 1rem;
    color: #64748B; 
    cursor: pointer;
    display: flex;
    align-items: center;
    gap: 4px; 
  }

  .arrow {
    font-size: 1rem;
  }
  
  .pageTitle {
    margin: 0;
    font-size: 2.5rem;
    font-weight: 800; 
    color: #072B68;
  }
  .backDrop{
    background-color: #ECF2F9;
    padding: 2rem;
    height: 100%;
    overflow: hidden; 
    box-sizing: border-box;
    display: flex;
    flex-direction: column;
  }

================
File: src/app/VolunteerNavView/Profile/page.tsx
================
"use client";

import Sidebar from "../../../components/Sidebar";
import ProfileForm from "../../../components/ProfileForm";
import styles from "./page.module.css";
const Profile: React.FC = () => {
  return (
    <div className={styles.container}>
      <Sidebar />

      <div className={styles.layout}>
        <div className={styles.mainContent}>
          <button
            className={styles.backButton}
            onClick={() => window.history.back()}
          >
            &lt; Back
          </button>
          <div className={styles.header}>
            <h1 className={styles.pageTitle}>Account</h1>
          </div>
        </div>
        <div className={styles.backDrop}>
          <ProfileForm />
        </div>
      </div>
    </div>
  );
};

export default Profile;

================
File: src/app/globals.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  --foreground-rgb: 0, 0, 0;
  --background-rgb: 255, 255, 255;
  --Bagel-Rescue-Blue: #3d97ff;
  --Bagel-Rescue-Light-Blue: #ecf2f9;
  --Bagel-Rescue-Dark-Blue: #072b68;
  --Bagel-Rescue-Light-Text: #6c7d93;
  --Bagel-Rescue-Light-Grey: #d3d8de;
  --Bagel-Rescue-Secondary-Color: #f5c871;
}

@media (prefers-color-scheme: light) {
  :root {
    --foreground-rgb: 0, 0, 0;
    --background-rgb: 255, 255, 255;
  }
}

body {
  color: rgb(var(--foreground-rgb));
  background-color: rgb(var(--background-rgb));
}

@layer utilities {
  .text-balance {
    text-wrap: balance;
  }
}

================
File: src/app/layout.tsx
================
import type { Metadata } from "next";
import { Inter } from "next/font/google";
import "./globals.css";
import { ReactNode } from "react";
import Providers from "../components/Providers";

const inter = Inter({ subsets: ["latin"] });

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: ReactNode;
}>) {
  return (
    <html lang="en">
      <body className={inter.className}>
        <Providers>{children}</Providers>
      </body>
    </html>
  );
}

================
File: src/app/page.tsx
================
import Image from "next/image";
import LocationDashboardPage from "./AdminNavView/LocationPage/page";
import LoginPage from "./Login/page";

export default function Home() {
  return (
    <LoginPage />
  );
}

================
File: src/assets/analytics_bagel.svg
================
<svg width="116" height="117" viewBox="0 0 116 117" fill="none" xmlns="http://www.w3.org/2000/svg">
<circle cx="58" cy="58.0471" r="58" fill="#F5C871"/>
<circle cx="58.0007" cy="56.341" r="22.1765" fill="white"/>
<circle cx="93.4832" cy="84.6585" r="1.70588" fill="#312521"/>
<circle cx="1.70588" cy="1.70588" r="1.70588" transform="matrix(-1 0 0 1 23.2012 82.9526)" fill="#312521"/>
<circle cx="83.5887" cy="98.6468" r="1.70588" fill="#312521"/>
<circle cx="1.70588" cy="1.70588" r="1.70588" transform="matrix(-1 0 0 1 33.0938 96.9409)" fill="#312521"/>
<circle cx="71.6473" cy="90.4583" r="1.70588" fill="#312521"/>
<circle cx="1.70588" cy="1.70588" r="1.70588" transform="matrix(-1 0 0 1 45.0371 88.7524)" fill="#312521"/>
<circle cx="58.0008" cy="96.9412" r="1.70588" fill="#312521"/>
<circle cx="1.70588" cy="1.70588" r="1.70588" transform="matrix(-1 0 0 1 59.707 95.2354)" fill="#312521"/>
<circle cx="87.0008" cy="45.764" r="1.70588" fill="#312521"/>
<circle cx="1.70588" cy="1.70588" r="1.70588" transform="matrix(-1 0 0 1 29.6836 44.0583)" fill="#312521"/>
<circle cx="69.9422" cy="102.058" r="1.70588" fill="#312521"/>
<circle cx="1.70588" cy="1.70588" r="1.70588" transform="matrix(-1 0 0 1 46.7422 100.352)" fill="#312521"/>
<circle cx="105.425" cy="68.9642" r="1.70588" fill="#312521"/>
<circle cx="1.70588" cy="1.70588" r="1.70588" transform="matrix(-1 0 0 1 11.2598 67.2583)" fill="#312521"/>
<circle cx="96.8953" cy="55.9998" r="1.70588" fill="#312521"/>
<circle cx="1.70588" cy="1.70588" r="1.70588" transform="matrix(-1 0 0 1 19.7891 54.2939)" fill="#312521"/>
<circle cx="100.307" cy="39.2821" r="1.70588" fill="#312521"/>
<circle cx="1.70588" cy="1.70588" r="1.70588" transform="matrix(-1 0 0 1 16.377 37.5764)" fill="#312521"/>
<circle cx="87.0008" cy="72.3763" r="1.70588" fill="#312521"/>
<circle cx="1.70588" cy="1.70588" r="1.70588" transform="matrix(-1 0 0 1 29.6836 70.6704)" fill="#312521"/>
<circle cx="81.8836" cy="30.0704" r="1.70588" fill="#312521"/>
<circle cx="1.70588" cy="1.70588" r="1.70588" transform="matrix(-1 0 0 1 34.8027 28.3645)" fill="#312521"/>
<circle cx="66.5301" cy="24.953" r="1.70588" fill="#312521"/>
<circle cx="1.70588" cy="1.70588" r="1.70588" transform="matrix(-1 0 0 1 50.1543 23.2471)" fill="#312521"/>
<circle cx="1.70588" cy="1.70588" r="1.70588" transform="matrix(-1 0 0 1 59.707 10.2822)" fill="#312521"/>
<circle cx="69.2599" cy="5.50571" r="1.02353" fill="#312521"/>
<circle cx="1.02353" cy="1.02353" r="1.02353" transform="matrix(-1 0 0 1 46.7422 4.48169)" fill="#312521"/>
<circle cx="89.7306" cy="17.1056" r="1.02353" fill="#312521"/>
<circle cx="1.02353" cy="1.02353" r="1.02353" transform="matrix(-1 0 0 1 26.2715 16.082)" fill="#312521"/>
<circle cx="108.154" cy="54.2938" r="1.02353" fill="#312521"/>
<circle cx="1.02353" cy="1.02353" r="1.02353" transform="matrix(-1 0 0 1 7.84766 53.2703)" fill="#312521"/>
<circle cx="87.0001" cy="60.0936" r="1.02353" fill="#312521"/>
<circle cx="1.02353" cy="1.02353" r="1.02353" transform="matrix(-1 0 0 1 29 59.0701)" fill="#312521"/>
<circle cx="91.7774" cy="94.2115" r="1.02353" fill="#312521"/>
<circle cx="1.02353" cy="1.02353" r="1.02353" transform="matrix(-1 0 0 1 24.2246 93.188)" fill="#312521"/>
<circle cx="60.7306" cy="107.518" r="1.02353" fill="#312521"/>
<circle cx="1.02353" cy="1.02353" r="1.02353" transform="matrix(-1 0 0 1 55.2715 106.494)" fill="#312521"/>
<circle cx="82.5665" cy="85.3407" r="1.02353" fill="#312521"/>
<circle cx="1.02353" cy="1.02353" r="1.02353" transform="matrix(-1 0 0 1 33.4375 84.3174)" fill="#312521"/>
<circle cx="103.719" cy="79.5409" r="1.02353" fill="#312521"/>
<circle cx="1.02353" cy="1.02353" r="1.02353" transform="matrix(-1 0 0 1 12.2832 78.5173)" fill="#312521"/>
<circle cx="103.719" cy="31.0938" r="1.02353" fill="#312521"/>
<circle cx="1.02353" cy="1.02353" r="1.02353" transform="matrix(-1 0 0 1 12.2832 30.0701)" fill="#312521"/>
<circle cx="78.4715" cy="15.3997" r="1.70588" fill="#312521"/>
<circle cx="1.70588" cy="1.70588" r="1.70588" transform="matrix(-1 0 0 1 38.2129 13.6938)" fill="#312521"/>
<circle cx="95.1883" cy="26.6585" r="1.70588" fill="#312521"/>
<circle cx="1.70588" cy="1.70588" r="1.70588" transform="matrix(-1 0 0 1 21.4941 24.9526)" fill="#312521"/>
<circle cx="54.2489" cy="87.3883" r="1.70588" fill="#FFE2D9"/>
<circle cx="64.825" cy="89.4349" r="1.70588" fill="#FFE2D9"/>
<circle cx="76.7664" cy="97.6229" r="1.70588" fill="#FFE2D9"/>
<circle cx="96.8953" cy="68.9642" r="1.70588" fill="#FFE2D9"/>
<circle cx="98.6004" cy="47.4698" r="1.70588" fill="#FFE2D9"/>
<circle cx="70.284" cy="18.1292" r="1.70588" fill="#FFE2D9"/>
<circle cx="85.2957" cy="21.5413" r="1.70588" fill="#FFE2D9"/>
<circle cx="88.7059" cy="35.8702" r="1.70588" fill="#FFE2D9"/>
<circle cx="39.9188" cy="102.058" r="1.70588" fill="#FFE2D9"/>
<circle cx="19.7899" cy="73.3997" r="1.70588" fill="#FFE2D9"/>
<circle cx="13.9891" cy="48.1529" r="1.70588" fill="#FFE2D9"/>
<circle cx="38.2137" cy="78.8582" r="1.70588" fill="#FFE2D9"/>
<circle cx="29.6824" cy="92.1641" r="1.70588" fill="#FFE2D9"/>
<circle cx="23.2" cy="33.8236" r="1.70588" fill="#FFE2D9"/>
<circle cx="42.9891" cy="29.3883" r="1.70588" fill="#FFE2D9"/>
<circle cx="46.4012" cy="17.1053" r="1.70588" fill="#FFE2D9"/>
<circle cx="56.2957" cy="18.8111" r="1.70588" fill="#FFE2D9"/>
<circle cx="60.3901" cy="5.8464" r="1.36471" fill="#FFE2D9"/>
<circle cx="31.0483" cy="13.3527" r="1.36471" fill="#FFE2D9"/>
<circle cx="109.519" cy="47.4704" r="1.36471" fill="#FFE2D9"/>
<circle cx="99.6245" cy="91.1411" r="1.36471" fill="#FFE2D9"/>
<circle cx="13.6485" cy="87.3878" r="1.02353" fill="#FFE2D9"/>
<circle cx="4.77744" cy="61.1173" r="1.02353" fill="#FFE2D9"/>
<circle cx="35.8263" cy="36.8936" r="1.02353" fill="#FFE2D9"/>
</svg>

================
File: src/assets/analytics-bitten-bagel.svg
================
<svg width="116" height="119" viewBox="0 0 116 119" fill="none" xmlns="http://www.w3.org/2000/svg">
<mask id="mask0_12901_8057" style="mask-type:alpha" maskUnits="userSpaceOnUse" x="0" y="2" width="116" height="117">
<path fill-rule="evenodd" clip-rule="evenodd" d="M56.6977 2.06201C56.2795 8.10029 59.2872 14.1699 64.9403 17.4337C65.3269 17.6569 65.7187 17.8628 66.1147 18.0517C64.4858 26.2206 68.1798 34.9186 75.882 39.3654C81.8967 42.838 88.9344 42.8976 94.7105 40.1402C96.0065 43.4436 98.3897 46.3468 101.702 48.259C105.921 50.695 110.779 51.0214 115.055 49.5655C115.676 52.9653 116 56.4686 116 60.0477C116 92.0802 90.0325 118.048 58 118.048C25.9675 118.048 0 92.0802 0 60.0477C0 28.4504 25.2666 2.75446 56.6977 2.06201ZM80.1763 58.3419C80.1763 70.5896 70.2476 80.5184 57.9998 80.5184C45.7521 80.5184 35.8234 70.5896 35.8234 58.3419C35.8234 46.0942 45.7521 36.1654 57.9998 36.1654C70.2476 36.1654 80.1763 46.0942 80.1763 58.3419Z" fill="#F5C871"/>
</mask>
<g mask="url(#mask0_12901_8057)">
<circle cx="58" cy="60.0471" r="58" fill="#F5C871"/>
<circle cx="58.0007" cy="58.341" r="22.1765" fill="white"/>
<circle cx="93.4832" cy="86.6585" r="1.70588" fill="#312521"/>
<circle cx="1.70588" cy="1.70588" r="1.70588" transform="matrix(-1 0 0 1 23.2012 84.9526)" fill="#312521"/>
<circle cx="83.5887" cy="100.647" r="1.70588" fill="#312521"/>
<circle cx="1.70588" cy="1.70588" r="1.70588" transform="matrix(-1 0 0 1 33.0938 98.9409)" fill="#312521"/>
<circle cx="71.6473" cy="92.4583" r="1.70588" fill="#312521"/>
<circle cx="1.70588" cy="1.70588" r="1.70588" transform="matrix(-1 0 0 1 45.0371 90.7524)" fill="#312521"/>
<circle cx="58.0008" cy="98.9412" r="1.70588" fill="#312521"/>
<circle cx="1.70588" cy="1.70588" r="1.70588" transform="matrix(-1 0 0 1 59.707 97.2354)" fill="#312521"/>
<circle cx="87.0008" cy="47.764" r="1.70588" fill="#312521"/>
<circle cx="1.70588" cy="1.70588" r="1.70588" transform="matrix(-1 0 0 1 29.6836 46.0583)" fill="#312521"/>
<circle cx="69.9422" cy="104.058" r="1.70588" fill="#312521"/>
<circle cx="1.70588" cy="1.70588" r="1.70588" transform="matrix(-1 0 0 1 46.7422 102.352)" fill="#312521"/>
<circle cx="105.425" cy="70.9642" r="1.70588" fill="#312521"/>
<circle cx="1.70588" cy="1.70588" r="1.70588" transform="matrix(-1 0 0 1 11.2598 69.2583)" fill="#312521"/>
<circle cx="96.8953" cy="57.9998" r="1.70588" fill="#312521"/>
<circle cx="1.70588" cy="1.70588" r="1.70588" transform="matrix(-1 0 0 1 19.7891 56.2939)" fill="#312521"/>
<circle cx="100.307" cy="41.2821" r="1.70588" fill="#312521"/>
<circle cx="1.70588" cy="1.70588" r="1.70588" transform="matrix(-1 0 0 1 16.377 39.5764)" fill="#312521"/>
<circle cx="87.0008" cy="74.3763" r="1.70588" fill="#312521"/>
<circle cx="1.70588" cy="1.70588" r="1.70588" transform="matrix(-1 0 0 1 29.6836 72.6704)" fill="#312521"/>
<circle cx="81.8836" cy="32.0704" r="1.70588" fill="#312521"/>
<circle cx="1.70588" cy="1.70588" r="1.70588" transform="matrix(-1 0 0 1 34.8027 30.3645)" fill="#312521"/>
<circle cx="66.5301" cy="26.953" r="1.70588" fill="#312521"/>
<circle cx="1.70588" cy="1.70588" r="1.70588" transform="matrix(-1 0 0 1 50.1543 25.2471)" fill="#312521"/>
<circle cx="1.70588" cy="1.70588" r="1.70588" transform="matrix(-1 0 0 1 59.707 12.2822)" fill="#312521"/>
<circle cx="69.2599" cy="7.50571" r="1.02353" fill="#312521"/>
<circle cx="1.02353" cy="1.02353" r="1.02353" transform="matrix(-1 0 0 1 46.7422 6.48169)" fill="#312521"/>
<circle cx="89.7306" cy="19.1056" r="1.02353" fill="#312521"/>
<circle cx="1.02353" cy="1.02353" r="1.02353" transform="matrix(-1 0 0 1 26.2715 18.082)" fill="#312521"/>
<circle cx="108.154" cy="56.2938" r="1.02353" fill="#312521"/>
<circle cx="1.02353" cy="1.02353" r="1.02353" transform="matrix(-1 0 0 1 7.84766 55.2703)" fill="#312521"/>
<circle cx="87.0001" cy="62.0936" r="1.02353" fill="#312521"/>
<circle cx="1.02353" cy="1.02353" r="1.02353" transform="matrix(-1 0 0 1 29 61.0701)" fill="#312521"/>
<circle cx="91.7774" cy="96.2115" r="1.02353" fill="#312521"/>
<circle cx="1.02353" cy="1.02353" r="1.02353" transform="matrix(-1 0 0 1 24.2246 95.188)" fill="#312521"/>
<circle cx="60.7306" cy="109.518" r="1.02353" fill="#312521"/>
<circle cx="1.02353" cy="1.02353" r="1.02353" transform="matrix(-1 0 0 1 55.2715 108.494)" fill="#312521"/>
<circle cx="82.5665" cy="87.3407" r="1.02353" fill="#312521"/>
<circle cx="1.02353" cy="1.02353" r="1.02353" transform="matrix(-1 0 0 1 33.4375 86.3174)" fill="#312521"/>
<circle cx="103.719" cy="81.5409" r="1.02353" fill="#312521"/>
<circle cx="1.02353" cy="1.02353" r="1.02353" transform="matrix(-1 0 0 1 12.2832 80.5173)" fill="#312521"/>
<circle cx="103.719" cy="33.0938" r="1.02353" fill="#312521"/>
<circle cx="1.02353" cy="1.02353" r="1.02353" transform="matrix(-1 0 0 1 12.2832 32.0701)" fill="#312521"/>
<circle cx="78.4715" cy="17.3997" r="1.70588" fill="#312521"/>
<circle cx="1.70588" cy="1.70588" r="1.70588" transform="matrix(-1 0 0 1 38.2129 15.6938)" fill="#312521"/>
<circle cx="95.1883" cy="28.6585" r="1.70588" fill="#312521"/>
<circle cx="1.70588" cy="1.70588" r="1.70588" transform="matrix(-1 0 0 1 21.4941 26.9526)" fill="#312521"/>
<circle cx="54.2489" cy="89.3883" r="1.70588" fill="#FFE2D9"/>
<circle cx="64.825" cy="91.4349" r="1.70588" fill="#FFE2D9"/>
<circle cx="76.7664" cy="99.6229" r="1.70588" fill="#FFE2D9"/>
<circle cx="96.8953" cy="70.9642" r="1.70588" fill="#FFE2D9"/>
<circle cx="98.6004" cy="49.4698" r="1.70588" fill="#FFE2D9"/>
<circle cx="70.284" cy="20.1292" r="1.70588" fill="#FFE2D9"/>
<circle cx="85.2957" cy="23.5413" r="1.70588" fill="#FFE2D9"/>
<circle cx="88.7059" cy="37.8702" r="1.70588" fill="#FFE2D9"/>
<circle cx="39.9188" cy="104.058" r="1.70588" fill="#FFE2D9"/>
<circle cx="19.7899" cy="75.3997" r="1.70588" fill="#FFE2D9"/>
<circle cx="13.9891" cy="50.1529" r="1.70588" fill="#FFE2D9"/>
<circle cx="38.2137" cy="80.8582" r="1.70588" fill="#FFE2D9"/>
<circle cx="29.6824" cy="94.1641" r="1.70588" fill="#FFE2D9"/>
<circle cx="23.2" cy="35.8236" r="1.70588" fill="#FFE2D9"/>
<circle cx="42.9891" cy="31.3883" r="1.70588" fill="#FFE2D9"/>
<circle cx="46.4012" cy="19.1053" r="1.70588" fill="#FFE2D9"/>
<circle cx="56.2957" cy="20.8111" r="1.70588" fill="#FFE2D9"/>
<circle cx="60.3901" cy="7.8464" r="1.36471" fill="#FFE2D9"/>
<circle cx="31.0483" cy="15.3527" r="1.36471" fill="#FFE2D9"/>
<circle cx="109.519" cy="49.4704" r="1.36471" fill="#FFE2D9"/>
<circle cx="99.6245" cy="93.1411" r="1.36471" fill="#FFE2D9"/>
<circle cx="13.6485" cy="89.3878" r="1.02353" fill="#FFE2D9"/>
<circle cx="4.77744" cy="63.1173" r="1.02353" fill="#FFE2D9"/>
<circle cx="35.8263" cy="38.8936" r="1.02353" fill="#FFE2D9"/>
</g>
<ellipse cx="77.6177" cy="16.2061" rx="5.62941" ry="5.62941" fill="#F5C871"/>
<ellipse cx="91.2646" cy="10.406" rx="3.24118" ry="3.24118" fill="#F5C871"/>
<ellipse cx="68.747" cy="3.24093" rx="3.24118" ry="3.24118" fill="#F5C871"/>
</svg>

================
File: src/assets/analytics-car.svg
================
<svg width="88" height="88" viewBox="0 0 88 88" fill="none" xmlns="http://www.w3.org/2000/svg">
<g id="mdi:car">
<path id="Vector" d="M18.3333 40.3333L23.8333 23.8333H64.1667L69.6667 40.3333M64.1667 58.6666C62.708 58.6666 61.309 58.0871 60.2776 57.0557C59.2461 56.0242 58.6667 54.6253 58.6667 53.1666C58.6667 51.7079 59.2461 50.3089 60.2776 49.2775C61.309 48.246 62.708 47.6666 64.1667 47.6666C65.6254 47.6666 67.0243 48.246 68.0558 49.2775C69.0872 50.3089 69.6667 51.7079 69.6667 53.1666C69.6667 54.6253 69.0872 56.0242 68.0558 57.0557C67.0243 58.0871 65.6254 58.6666 64.1667 58.6666ZM23.8333 58.6666C22.3746 58.6666 20.9757 58.0871 19.9442 57.0557C18.9128 56.0242 18.3333 54.6253 18.3333 53.1666C18.3333 51.7079 18.9128 50.3089 19.9442 49.2775C20.9757 48.246 22.3746 47.6666 23.8333 47.6666C25.292 47.6666 26.691 48.246 27.7224 49.2775C28.7539 50.3089 29.3333 51.7079 29.3333 53.1666C29.3333 54.6253 28.7539 56.0242 27.7224 57.0557C26.691 58.0871 25.292 58.6666 23.8333 58.6666ZM69.3733 21.9999C68.64 19.8733 66.5867 18.3333 64.1667 18.3333H23.8333C21.4133 18.3333 19.36 19.8733 18.6267 21.9999L11 43.9999V73.3333C11 74.3057 11.3863 75.2383 12.0739 75.926C12.7616 76.6136 13.6942 76.9999 14.6667 76.9999H18.3333C19.3058 76.9999 20.2384 76.6136 20.9261 75.926C21.6137 75.2383 22 74.3057 22 73.3333V69.6666H66V73.3333C66 74.3057 66.3863 75.2383 67.0739 75.926C67.7616 76.6136 68.6942 76.9999 69.6667 76.9999H73.3333C74.3058 76.9999 75.2384 76.6136 75.9261 75.926C76.6137 75.2383 77 74.3057 77 73.3333V43.9999L69.3733 21.9999Z" fill="#072B68"/>
</g>
</svg>

================
File: src/components/AdminProfileForm.tsx
================
'use client'

import styles from './ProfileForm.module.css';
import { signOut } from "next-auth/react";
import { useRouter } from "next/navigation";

const ProfileForm: React.FC = () => {
  const router = useRouter();

  const handleSignOut = async () => {
    try {
      console.log("Signing out..."); // Debug log
      const result = await signOut({
        redirect: true,
        callbackUrl: '/Login'
      });
      console.log("Sign out result:", result); // Debug log
      
      // Force redirect if the automatic redirect doesn't work
      router.push('/Login');
      router.refresh();
    } catch (error) {
      console.error("Sign out error:", error);
    }
  };

  return (
    <div className={styles.container}>
      <div className={styles.sidebar}>
        <ul className={styles.menu}>
          <li className={`${styles.menuItem} ${styles.active}`}>Profile</li>
          <li 
            className={`${styles.menuItem} ${styles.signOut}`}
            onClick={handleSignOut}
            style={{ cursor: 'pointer' }}
          >
            Sign Out
          </li>
        </ul>
      </div>

      <div className={styles.formContainer}>
        <h2 className={styles.name}>Jane Doe</h2>
        <p className={styles.role}>Admin</p>

        <form className={styles.form}>
          <div className={styles.row}>
            <div className={styles.field}>
              <label className={styles.fieldLabel}>First Name</label>
              <input type="text" className={styles.fieldInput} value='"Jane"' disabled />
            </div>

            <div className={styles.field}>
              <label className={styles.fieldLabel}>Last Name</label>
              <input type="text" className={styles.fieldInput} value='"Doe"' disabled />
            </div>
          </div>
        </form>
      </div>
    </div>
  );
};

export default ProfileForm;

================
File: src/components/AdminSidebar.tsx
================
'use client';

import Link from 'next/link';
import { usePathname } from 'next/navigation';
import { useState } from 'react';
import styles from './Sidebar.module.css'; 
import { FiHome, FiUser, } from 'react-icons/fi';
import { TbBrandGoogleAnalytics } from "react-icons/tb";
import { CiRoute, CiLocationOn } from "react-icons/ci";

interface NavItem {
  name: string;
  href: string;
  icon: JSX.Element;
}

const navItems: NavItem[] = [
  { name: 'Dashboard', href: '/AdminNavView/DailyShiftDashboard', icon: <FiHome /> },
  { name: 'Routes', href: '/AdminNavView/RouteCreationPage', icon: <CiRoute /> },
  { name: 'Locations', href: '/AdminNavView/LocationPage', icon: <CiLocationOn /> },
  { name: 'Analytics', href: '/AdminNavView/AnalyticsPage', icon: <TbBrandGoogleAnalytics /> },

];

const AdminSidebar: React.FC = () => {
  const pathname = usePathname(); 
  const [isOpen, setIsOpen] = useState<boolean>(true); 

  const toggleSidebar = () => setIsOpen(!isOpen);

  return (
    <div className={`${styles.sidebar} ${isOpen ? styles.open : styles.closed}`}>
      <Link href="/AdminNavView/DailyShiftDashboard">
      <div className={styles.navHeader}>
        <div className={styles.navIcon}>🥯</div>
        <div className={styles.navHeaderText}>Bagel Rescue</div>
        <div className={styles.navTitleText}>Admin Portal</div>
      </div>

      
      </Link>
      
      <nav className={styles.nav}>
        {navItems.map((item) => (
          <Link key={item.name} href={item.href}>
            <div
              className={`${styles.navItem} ${
                pathname === item.href ? styles.active : ''
              }`}
            >
              <div className={styles.icon}>{item.icon}</div>
              {isOpen && <span className={styles.navText}>{item.name}</span>}
            </div>
          </Link>
        ))}
      </nav>
      <Link href="/AdminNavView/AdminProfile">
      <div className={styles.profile}>
          <div className={styles.avatar}></div>
          {isOpen && (
            <div className={styles.profileInfo}>
              <p className={styles.name}>Jane Doe</p>
              <p className={styles.role}>Admin</p>
            </div>
          )}
        </div>
      
      </Link>
      
    </div>
  );
};

export default AdminSidebar;

================
File: src/components/ProfileForm.module.css
================
.container {
    display: flex;
    background-color: #FFFFFF;
    padding: 2rem;
    border-radius: 12px;
    flex: 1;
    overflow: auto;
  }
  
  .sidebar {
    width: 20%;           
    min-width: 0;    
    max-width: 20%;
    padding-right: 2rem;
    border-right: 1px solid #E5E7EB;
  }
  
  .menu {
    list-style: none;
    padding: 0;
  }
  
  .menuItem {
    margin-bottom: 1rem;
    font-size: 1rem;
    color: #64748B;
    cursor: pointer;
    transition: color 0.3s;
  }
  
  .menuItem:hover {
    color: #1D4ED8; 
  }
  
  .active {
    font-weight: bold;
    color: #072B68;
  }
  
  .signOut {
    color: #EF4444;
  }
  
  .formContainer {
    flex: 1;
    padding-left: 4rem;
  }
  
  .name {
    font-size: 1.50rem;
    padding-bottom: 0.25rem;
    font-weight: 800;
    color: #1E3A8A; 
    margin: 0;
  }
  
  .role {
    margin-bottom: 2rem;
    font-weight: 400;
    font-size: 1.50rem;
    color: #072B68;
  }
  
  .form {
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
  }
  
  .row {
    display: flex;
    flex-wrap: wrap;
    gap: 2rem;
  }
  
  .field {
    flex: 1;
    display: flex;
    flex-direction: column;
  }
  
  .fieldLabel {
    margin-bottom: 0.9rem;
    font-weight: 500;
    font-size: 1rem;
    color: #072B68; 
  }
  
  .fieldInput {
    padding: 0.75rem;
    background-color: #ECF2F9;
    border: 1px solid border #D3D8DE; 
    border-radius: 8px;
    color: #6C7D93;
    font-size: 1rem;
  }
  
  .fieldInput:focus {
    outline: none;
    border-color: #1D4ED8; 
  }

================
File: src/components/ProfileForm.tsx
================
"use client";

import styles from "./ProfileForm.module.css";
import { signOut } from "next-auth/react";
import { useRouter } from "next/navigation";

const ProfileForm: React.FC = () => {
  const router = useRouter();

  const handleSignOut = async () => {
    try {
      console.log("Signing out..."); // Debug log
      const result = await signOut({
        redirect: true,
        callbackUrl: '/Login'
      });
      console.log("Sign out result:", result); // Debug log
      
      // Force redirect if the automatic redirect doesn't work
      router.push('/Login');
      router.refresh();
    } catch (error) {
      console.error("Sign out error:", error);
    }
  };

  return (
    <div className={styles.container}>
      <div className={styles.sidebar}>
        <ul className={styles.menu}>
          <li className={`${styles.menuItem} ${styles.active}`}>Profile</li>
          <li className={styles.menuItem}>Password</li>
          <li 
            className={`${styles.menuItem} ${styles.signOut}`}
            onClick={handleSignOut}
            style={{ cursor: 'pointer' }}
          >
            Sign Out
          </li>
        </ul>
      </div>

      <div className={styles.formContainer}>
        <h2 className={styles.name}>Jane Doe</h2>
        <p className={styles.role}>Volunteer</p>

        <form className={styles.form}>
          <div className={styles.row}>
            <div className={styles.field}>
              <label className={styles.fieldLabel}>First Name</label>
              <input
                type="text"
                className={styles.fieldInput}
                value='"Jane"'
                disabled
              />
            </div>

            <div className={styles.field}>
              <label className={styles.fieldLabel}>Last Name</label>
              <input
                type="text"
                className={styles.fieldInput}
                value='"Doe"'
                disabled
              />
            </div>
          </div>

          <div className={styles.field}>
            <label className={styles.fieldLabel}>Location</label>
            <input
              type="text"
              className={styles.fieldInput}
              value="Alpharetta, GA"
              disabled
            />
          </div>

          <div className={styles.row}>
            <div className={styles.field}>
              <label className={styles.fieldLabel}>Phone Number</label>
              <input
                type="text"
                className={styles.fieldInput}
                value="(123) 456-7890"
                disabled
              />
            </div>

            <div className={styles.field}>
              <label className={styles.fieldLabel}>Email</label>
              <input
                type="email"
                className={styles.fieldInput}
                value="blank@email.com"
                disabled
              />
            </div>
          </div>
        </form>
      </div>
    </div>
  );
};

export default ProfileForm;

================
File: src/components/Providers.tsx
================
'use client';

import { SessionProvider } from "next-auth/react";
import { ReactNode } from "react";

export default function Providers({ children }: { children: ReactNode }) {
  return <SessionProvider>{children}</SessionProvider>;
}

================
File: src/components/Sidebar.module.css
================
.sidebar {
    height: 100vh;
    background-color: #fff;
    display: flex;
    flex-direction: column;
    padding: 1rem;
    transition: width 0.3s ease;
    border-right: 1px solid #D3D8DE;
  }
  
  .open {
    width: 15rem; 
  }
  
  .closed {
    width: 5rem; 
  }
  
  .toggleButton {
    background: none;
    border: none;
    color: #000;
    cursor: pointer;
    margin-bottom: 2rem;
    font-size: 3rem;
  }
  
  .nav {
    flex: 1;
  }
  
  .navIcon {
    font-size: 3rem;
  }

  .navHeaderText {
    font-size: 1.5rem;
    font-weight: 700;
    color: #0F7AFF;
  }

  .navTitleText {  
    font-size: 1rem;
    font-weight: 400;
    color:#808080;

  }

  .navHeader {
    text-align: left;
    margin-bottom: 1rem;
    font-weight: bold;
  }

  .navItem {
    display: flex;
    align-items: center;
    padding: 0.75rem;
    margin-bottom: 0.5rem;
    color: #000;
    border-radius: 0.5rem;
    cursor: pointer;
    transition: background-color 0.3s ease;
  }
  
  .navItem:hover {
    background-color: #c3c4c5;
  }
  
  .active {
    background-color: #ffffff;
  }
  
  .icon {
    font-size: 1.5rem;
  }
  
  .navText {
    margin-left: 1rem;
    font-size: 0.875rem;
  }


  .profile {
    display: flex;
    align-items: center;
    padding: 1rem;
    margin-top: auto; 
    background-color: #e5e7eb;
    border-radius: 0.5rem;
    transition: all 0.3s ease;
  }
  
  .avatar {
    width: 40px;
    height: 40px;
    background-color: #0F7AFF;
    border-radius: 8px;
  }
  
  .profileInfo {
    margin-left: 1rem;
  }
  
  .name {
    font-weight: bold;
    margin: 0;
    color: #0F7AFF;
  }
  
  .role {
    margin: 0;
    color: #000;
  }

================
File: src/components/Sidebar.tsx
================
"use client";

import Link from "next/link";
import { usePathname } from "next/navigation";
import { useState } from "react";
import styles from "./Sidebar.module.css";
import { FiHome, FiUser } from "react-icons/fi";
import { TbBrandGoogleAnalytics } from "react-icons/tb";

interface NavItem {
  name: string;
  href: string;
  icon: JSX.Element;
}

const navItems: NavItem[] = [
  { name: "Dashboard", href: "/VolunteerNavView/Homepage", icon: <FiHome /> },
  {
    name: "Analytics",
    href: "/VolunteerNavView/Analytics",
    icon: <TbBrandGoogleAnalytics />,
  },
];

const Sidebar: React.FC = () => {
  const pathname = usePathname();
  const [isOpen, setIsOpen] = useState<boolean>(true);

  const toggleSidebar = () => setIsOpen(!isOpen);

  return (
    <div
      className={`${styles.sidebar} ${isOpen ? styles.open : styles.closed}`}
    >
      <Link href="/VolunteerNavView/Homepage">
        <div className={styles.navHeader}>
          <div className={styles.navIcon}>🥯</div>
          <div className={styles.navHeaderText}>Bagel Rescue</div>
          <div className={styles.navTitleText}>Volunteer Portal</div>
        </div>
      </Link>

      <nav className={styles.nav}>
        {navItems.map((item) => (
          <Link key={item.name} href={item.href}>
            <div
              className={`${styles.navItem} ${
                pathname === item.href ? styles.active : ""
              }`}
            >
              <div className={styles.icon}>{item.icon}</div>
              {isOpen && <span className={styles.navText}>{item.name}</span>}
            </div>
          </Link>
        ))}
      </nav>
      <Link href="/VolunteerNavView/Profile">
        <div className={styles.profile}>
          <div className={styles.avatar}></div>
          {isOpen && (
            <div className={styles.profileInfo}>
              <p className={styles.name}>Jane Doe</p>
              <p className={styles.role}>Volunteer</p>
            </div>
          )}
        </div>
      </Link>
    </div>
  );
};

export default Sidebar;

================
File: src/server/db/actions/analytics.ts
================
"use server";

import dbConnect from "../dbConnect";
import { AnalyticsModel, Analytics } from "../models/analytics";

async function updateAnalytics(analytics: Analytics): Promise<Analytics> {
  try {
    await dbConnect();

    await AnalyticsModel.deleteMany({});

    return await analytics.save();
  } catch (error) {
    const err = error as Error;
    throw new Error(`Error has occurred when creating shift: ${err.message}`);
  }
}

async function getAnalytics(): Promise<string | null> {
  try {
    await dbConnect();

    return JSON.stringify(await AnalyticsModel.findOne());
  } catch (error) {
    const err = error as Error;
    throw new Error(`Error has occurred when creating shift: ${err.message}`);
  }
}

export { updateAnalytics, getAnalytics };

================
File: src/server/db/actions/location.ts
================
'use server';

import { LocationModel, Location, Address } from "../models/location";
import dbConnect from "../dbConnect";

export async function createLocation(newLocation: Location): Promise<Location> {
  await dbConnect();
  try {
    const location = new LocationModel(newLocation);
    await location.save();
    return location;
  } catch (error) {
    const err = error as Error;
    throw new Error(`Error creating location: ${err.message}`);
  }
}

export async function getAllLocationById(id: string[]): Promise<string | null> {
  await dbConnect();
  try {
    const location = await LocationModel.find({_id: id});
    return JSON.stringify(location);
  }
  catch (error) {
    const err = error as Error;
    throw new Error(`Error getting location by id: ${err.message}`);
  }
}

export async function updateLocationName(
  id: string,
  newLocationName: string
): Promise<Location | null> {
  await dbConnect();
  try {
    const location = await LocationModel.findByIdAndUpdate(
      id,
      { locationName: newLocationName },
      { new: true }
    );
    return location;
  } catch (error) {
    const err = error as Error;
    throw new Error(`Error creating location name: ${err.message}`);
  }
}

export async function updateNotes(
  id: string,
  newNote: string
): Promise<Location | null> {
  await dbConnect();
  try {
    const location = await LocationModel.findByIdAndUpdate(
      id,
      { notes: newNote },
      { new: true }
    );
    return location;
  } catch (error) {
    const err = error as Error;
    throw new Error(`Error updating notes: ${err.message}`);
  }
}

export async function updateAddress(
  id: string,
  newAddress: Address
): Promise<Location | null> {
  await dbConnect();
  try {
    const location = await LocationModel.findByIdAndUpdate(
      id,
      { address: newAddress },
      { new: true }
    );
    return location;
  } catch (error) {
    const err = error as Error;
    throw new Error(`Error updating address: ${err.message}`);
  }
}

export async function getAllLocations(): Promise<string | null> {
  try {
    await dbConnect();
    const locations = await LocationModel.find();
    return JSON.stringify(locations);
  } catch (error) {
    const err = error as Error;
    throw new Error(`Error getting all locations: ${err.message}`);
  }
}

================
File: src/server/db/actions/Login.ts
================
import {
  signInWithEmailAndPassword,
  GoogleAuthProvider,
  signInWithPopup,
  setPersistence,
  browserLocalPersistence,
} from "firebase/auth";
import { auth } from "../firebase";

// Login with Email and Password
export const loginWithCredentials = async (email: string, password: string) => {
  return await setPersistence(auth, browserLocalPersistence)
    .then(() => {
      return signInWithEmailAndPassword(auth, email, password);
    })
    .then(async (userCredential) => {
      const user = userCredential.user;
      const token = await user.getIdToken();
      // Optionally: You can store the token in a secure cookie if needed,
      // but Firebase already handles session persistence securely.
      return { success: true };
    })
    .catch((error) => {
      console.error("Error during login:", error);
      let errorMsg = "";
      if (
        error.code === "auth/wrong-password" ||
        error.code === "auth/user-not-found" ||
        error.code === "auth/invalid-email"
      ) {
        errorMsg =
          "Email or password is incorrect, please double check the email and password for your account.";
      } else {
        errorMsg = "Something went wrong, please try again.";
      }
      return { success: false, error: errorMsg };
    });
};

// Login with Google
export const loginWithGoogle = async () => {
  return await setPersistence(auth, browserLocalPersistence)
    .then(() => {
      return signInWithPopup(auth, new GoogleAuthProvider());
    })
    .then(async (res) => {
      const user = res.user;
      const token = await user.getIdToken();
      const isNewUser =
        res.user.metadata.creationTime === res.user.metadata.lastSignInTime;
      return { success: true, isNewUser };
    })
    .catch((error) => {
      console.error("Error during Google login:", error);
      const errorMsg = "Something went wrong, please try again.";
      return { success: false, error: errorMsg };
    });
};

================
File: src/server/db/actions/Route.ts
================
"use server";

import { ObjectId } from "mongodb";
import Route, { ILocation, IRoute } from "../models/Route";
import dbConnect from "../dbConnect";

export async function getRoute(id: string): Promise<IRoute | null> {
  try {
    return await Route.findById(id);
  } catch (error) {
    console.error("Error fetching route:", error);
    throw new Error("Failed to fetch route");
  }
}

export async function createRoute(route: string): Promise<string | null> {
  try {
    await dbConnect();
    const newRoute = new Route(JSON.parse(route || "{}"));
    return JSON.stringify(await newRoute.save());
  } catch (error) {
    console.error("Error creating route:", error);
    throw new Error("Failed to create route");
  }
}

export async function updateRouteName(
  id: string,
  newRouteName: string
): Promise<IRoute | null> {
  try {
    return await Route.findByIdAndUpdate(
      id,
      { routeName: newRouteName },
      { new: true }
    );
  } catch (error) {
    console.error("Error updating route name:", error);
    throw new Error("Failed to update route name");
  }
}

export async function getLocations(id: string): Promise<ILocation[] | null> {
  try {
    const route = await Route.findById(id);
    return route ? route.locations : null;
  } catch (error) {
    console.error("Error fetching locations:", error);
    throw new Error("Failed to fetch locations");
  }
}

export async function addLocation(
  id: string,
  locationId: string,
  index: number
): Promise<IRoute | null> {
  try {
    const route = await Route.findById(id);
    if (!route) return null;

    const newLocation: ILocation = {
      location: new ObjectId(locationId),
      type: "pickup", // Default to pickup, you may want to make this configurable
    };

    route.locations.splice(index, 0, newLocation);
    return await route.save();
  } catch (error) {
    console.error("Error adding location:", error);
    throw new Error("Failed to add location");
  }
}

export async function removeLocation(
  id: string,
  index: number
): Promise<IRoute | null> {
  try {
    const route = await Route.findById(id);
    if (!route) return null;

    route.locations.splice(index, 1);
    return await route.save();
  } catch (error) {
    console.error("Error removing location:", error);
    throw new Error("Failed to remove location");
  }
}

export async function getAllRoutes(): Promise<string | null> {
  try {
    await dbConnect();
    const routes = await Route.find();
    return JSON.stringify(routes);
  } catch (error) {
    const err = error as Error;
    throw new Error(`Error getting all routes: ${err.message}`);
  }
}

export async function getAllRoutesbyIds(routeIds: ObjectId[]): Promise<string | null> {
  try {
      await dbConnect();
      const data = await Route.find({_id: {$in: routeIds}});
      return JSON.stringify(data);
  } catch (error) {
      const err = error as Error;
      throw new Error(`Error has occurred when getting all routes: ${err.message}`);
  }
}

================
File: src/server/db/actions/shift.ts
================
"use server";

import { ObjectId } from "mongoose";
import dbConnect from "../dbConnect";
import { RecurrenceModel, Shift, ShiftModel } from "../models/shift";
import { RRule } from "rrule";

export async function createShift(shiftObject: string): Promise<string | null> {
  try {
    await dbConnect();
    const newShift = new ShiftModel(JSON.parse(shiftObject || "{}"));
    return JSON.stringify(await newShift.save());
  } catch (error) {
    const err = error as Error;
    throw new Error(`Error has occurred when creating shift: ${err.message}`);
  }
}

export async function getShift(shiftId: ObjectId): Promise<Shift | null> {
  try {
    await dbConnect();

    const data = await ShiftModel.findById(shiftId);
    return data;
  } catch (error) {
    const err = error as Error;
    throw new Error(`Error has occurred when getting shift: ${err.message}`);
  }
}

export async function updateRoute(
  shiftId: ObjectId,
  routeId: ObjectId
): Promise<Shift | null> {
  try {
    await dbConnect();

    const data = await ShiftModel.findByIdAndUpdate(
      shiftId,
      { routeId: routeId },
      { new: true }
    );
    return data;
  } catch (error) {
    const err = error as Error;
    throw new Error(`Error has occurred when updating route: ${err.message}`);
  }
}

/*
* Updates the date of a shift 

* If the shift has a recurrence rule, then the start date of the rule is 
* updated to the new date and all recurrences are updated accordingly.
* 
* Also changes the day of the week that the shift occurs on to the new date's day of the week
*/
export async function updateDate(
  shiftId: ObjectId,
  newDate: Date
): Promise<Shift | null> {
  try {
    await dbConnect();

    const oldData = await getShift(shiftId);
    if (!oldData) {
      throw new Error("Shift does not exist");
    }

    if (oldData.recurrenceRule === "") {
      const data = await ShiftModel.findByIdAndUpdate(
        shiftId,
        { shiftDate: newDate },
        { new: true }
      );
      return data;
    }

    const dataDiff = newDate.getTime() - oldData.shiftDate.getTime();
    const newRecurrences = oldData.recurrences.map((recurrence) => {
      return new RecurrenceModel({
        date: new Date(recurrence.date.getTime() + dataDiff),
        capacity: recurrence.capacity,
        currSignedUp: recurrence.currSignedUp,
      });
    });

    const oldRule = RRule.fromString(oldData.recurrenceRule);
    const newRule = new RRule({
      ...oldRule.options,
      dtstart: newDate,
      byweekday: newDate.getDay(),
    });

    const data = await ShiftModel.findByIdAndUpdate(
      shiftId,
      {
        shiftDate: newDate,
        recurrences: newRecurrences,
        recurrenceRule: newRule.toString(),
      },
      { new: true }
    );
    return data;
  } catch (error) {
    const err = error as Error;
    throw new Error(`Error has occurred when updating date: ${err.message}`);
  }
}

// updates the capacity of a shift and all its recurrences
export async function updateCapacity(
  shiftId: ObjectId,
  newCapacity: number
): Promise<Shift | null> {
  try {
    await dbConnect();

    if (newCapacity < 0) {
      throw new Error("Capacity cannot be negative");
    }

    const data = await ShiftModel.findByIdAndUpdate(
      shiftId,
      { capacity: newCapacity, "recurrences.$[].capacity": newCapacity },
      { new: true }
    );
    return data;
  } catch (error) {
    const err = error as Error;
    throw new Error(
      `Error has occurred when updating capacity: ${err.message}`
    );
  }
}

// updates the recurrence rule of a shift and clears all recurrences
export async function updateRecurrenceRule(
  shiftId: ObjectId,
  newRule: string
): Promise<Shift | null> {
  try {
    await dbConnect();

    const data = await ShiftModel.findByIdAndUpdate(
      shiftId,
      { recurrenceRule: newRule, recurrences: [] },
      { new: true }
    );
    return data;
  } catch (error) {
    const err = error as Error;
    throw new Error(
      `Error has occurred when updating recurrence rule: ${err.message}`
    );
  }
}

/*
 * Signs up a new user for a shift and updates the number of people signed up
 * If capacity is reached, then the user is not signed up and false is returned
 *
 *
 * If a shiftDate is provided and is validated against the recurrence rule, then currSignedUp is incremented for that specific recurrence.
 *
 * If capacity is reached for that specific date, then false is returned
 */
export async function newSignUp(
  shiftId: ObjectId,
  shiftDate?: Date
): Promise<boolean> {
  try {
    await dbConnect();

    const data = await getShift(shiftId);
    if (!data) {
      throw new Error("Shift does not exist");
    }

    if (shiftDate && data.recurrenceRule !== "") {
      return await recurrenceSignup(data, shiftDate);
    } else if (data.capacity > data.currSignedUp) {
      data.currSignedUp += 1;
      await ShiftModel.findByIdAndUpdate(shiftId, data);
      return true;
    }

    return false;
  } catch (error) {
    const err = error as Error;
    throw new Error(`Error has occurred for newSignUp: ${err.message}`);
  }
}

/* 
    Helper function for newSignUp

    Validates the shiftDate against the recurrence rule and signs up the user for that specific date
*/
async function recurrenceSignup(
  data: Shift,
  shiftDate: Date
): Promise<boolean> {
  const ocurrenceDate = RRule.fromString(data.recurrenceRule).after(
    shiftDate,
    true
  );
  if (
    !ocurrenceDate ||
    ocurrenceDate.getTime() !== shiftDate.getTime() ||
    data.shiftDate.getTime() === shiftDate.getTime()
  ) {
    return false;
  }

  const recurrences = data.recurrences.filter((recurrence) => {
    return recurrence.date.getTime() === shiftDate.getTime();
  });

  if (recurrences.length === 0) {
    data.recurrences.push(
      new RecurrenceModel({
        date: shiftDate,
        capacity: data.capacity,
        currSignedUp: 1,
      })
    );
  } else {
    if (recurrences[0].capacity <= recurrences[0].currSignedUp) {
      return false;
    }
    recurrences[0].currSignedUp += 1;
  }

  await ShiftModel.findByIdAndUpdate(data._id, data);
  return true;
}

export async function getAllShifts(): Promise<string | null> {
  try {
    await dbConnect();
    const shifts = await ShiftModel.find();
    return JSON.stringify(shifts);
  } catch (error) {
    const err = error as Error;
    throw new Error(`Error getting all shifts: ${err.message}`);
  }
}

export async function getShiftAnalytics(): Promise<string | null> {
  try {
    await dbConnect();
    const shifts = await ShiftModel.find();
    const monthlyShifts = new Map<string, number>();
    shifts.forEach((s) => {
      s.recurrences.forEach((r) => {
        const date = new Date(r.date);
        const key = `${date.getFullYear()}-${(date.getMonth() + 1).toString()}`;
        if (monthlyShifts.has(key)) {
          monthlyShifts.set(key, monthlyShifts.get(key)! + 1);
        } else {
          monthlyShifts.set(key, 1);
        }
      });
    });
    const today = new Date();
    const currMonth = `${today.getFullYear()}-${(
      today.getMonth() + 1
    ).toString()}`;
    const shiftsThisMonth = monthlyShifts.has(currMonth)
      ? monthlyShifts.get(currMonth)!
      : 0;
    monthlyShifts.delete(currMonth);

    let monthlyAvg = 0;
    monthlyShifts.forEach((value) => {
      monthlyAvg += value;
    });
    monthlyAvg /= monthlyShifts.size;

    return JSON.stringify({
      thisMonth: shiftsThisMonth,
      monthlyAverage: monthlyAvg,
    });
  } catch (error) {
    const err = error as Error;
    throw new Error(`Error getting shift analytics: ${err.message}`);
  }
}

interface TempRecentShift {
  routeId: string;
  date: Date;
}

export async function getRecentShifts(
  numRecentShifts: number
): Promise<string | null> {
  try {
    await dbConnect();
    const shifts = await ShiftModel.find();
    const shiftRecurrences = shifts
      .flatMap((s: Shift) =>
        s.recurrences.map((r) => ({
          routeId: s.routeId.toString(),
          date: new Date(r.date),
        }))
      )
      .sort(
        (a: TempRecentShift, b: TempRecentShift) =>
          new Date(b.date).getTime() - new Date(a.date).getTime()
      )
      .slice(0, numRecentShifts);
    return JSON.stringify(shiftRecurrences);
  } catch (error) {
    const err = error as Error;
    throw new Error(`Error getting all shifts: ${err.message}`);
  }
}

================
File: src/server/db/actions/User.ts
================
"use server";

import mongoose from "mongoose";
import { ClientSession, UpdateQuery } from "mongoose";
import User, { IUser } from "../models/User";
import dbConnect from "../dbConnect";

export type UserStats = {
  bagelsDelivered: number;
  totalDeliveries: number;
};

async function createUser(
  newUser: IUser,
  session?: ClientSession
): Promise<IUser> {
  if (!newUser.bagelsDelivered) {
    newUser.bagelsDelivered = 0;
  }
  if (!newUser.totalDeliveries) {
    newUser.totalDeliveries = 0;
  }

  await dbConnect();

  const document = new User(newUser);
  const {
    _doc: { _id, __v, ...userDocument },
  } = await document.save({ session });
  userDocument._id = _id;
  return userDocument;
}

async function getUser(
  id: mongoose.Types.ObjectId,
  session?: ClientSession
): Promise<IUser | null> {
  await dbConnect();

  const document = await User.findById(
    id,
    { __v: 0 },
    {
      session: session,
    }
  );
  if (!document) {
    throw new Error("User with that id " + id.toString() + " does not exist");
  }
  return document;
}

async function updateUser(
  id: mongoose.Types.ObjectId,
  updated: UpdateQuery<IUser>,
  session?: ClientSession
): Promise<IUser | null> {
  await dbConnect();

  const document = await User.findByIdAndUpdate(id, updated, {
    projection: { __v: 0 },
    session: session,
  });
  if (!document) {
    throw new Error("User with that id " + id.toString() + " does not exist");
  }
  return document;
}

async function getUserStats(
  id: mongoose.Types.ObjectId,
  session?: ClientSession
): Promise<UserStats | null> {
  await dbConnect();

  const document = await User.findById(
    id,
    { __v: 0 },
    {
      session: session,
    }
  );
  if (!document) {
    throw new Error("User with that id " + id.toString() + " does not exist");
  }
  return {
    bagelsDelivered: document.bagelsDelivered,
    totalDeliveries: document.totalDeliveries,
  };
}

async function getAllUserStats(): Promise<string | null> {
  await dbConnect();

  const documents = await User.find(
    {},
    { firstName: 1, lastName: 1, bagelsDelivered: 1, totalDeliveries: 1 }
  );
  return JSON.stringify(documents);
}

async function getTotalBagelsDelivered(): Promise<number | null> {
  await dbConnect();

  const totalBagelsDelivered = await User.aggregate([
    { $group: { _id: null, total: { $sum: "$bagelsDelivered" } } },
  ]);
  return totalBagelsDelivered[0]?.total || 0;
}

export {
  createUser,
  getUser,
  updateUser,
  getUserStats,
  getAllUserStats,
  getTotalBagelsDelivered,
};

================
File: src/server/db/firebase/admin/config.ts
================
import { ServiceAccount } from "firebase-admin";
import dotenv from "dotenv";
dotenv.config();

// Define the service account object with the correct types and camel-cased properties
const serviceAccount: ServiceAccount = {
  projectId: process.env.FIREBASE_PROJECT_ID!,
  clientEmail: process.env.FIREBASE_CLIENT_EMAIL!,
  privateKey: process.env.FIREBASE_PRIVATE_KEY?.replace(/\\n/g, "\n")!, // Handle escaped newlines in the private key
};

// Export the service account configuration
export default serviceAccount;

================
File: src/server/db/firebase/admin/index.ts
================
// db/firebase/admin/index.js
import admin from "firebase-admin";
import config from "./config";

try {
  admin.initializeApp({
    credential: admin.credential.cert(config),
  });
} catch (error) {
  if (error instanceof Error && !/already exists/.test(error.message)) {
    console.error("Firebase admin initialization error", error.stack);
  }
}

export default admin;

================
File: src/server/db/firebase/index.ts
================
// Import the functions you need from the SDKs you need
import { initializeApp } from "firebase/app";
import { getAuth } from "firebase/auth";
import { getFirestore } from "firebase/firestore";
import { getStorage } from "firebase/storage";
import dotenv from "dotenv";
dotenv.config();
// TODO: Add SDKs for Firebase products that you want to use
// https://firebase.google.com/docs/web/setup#available-libraries

// Your web app's Firebase configuration
const firebaseConfig = {
  apiKey: process.env.NEXT_PUBLIC_FIREBASE_API_KEY,
  authDomain: process.env.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN,
  projectId: process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID,
  storageBucket: process.env.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET,
  messagingSenderId: process.env.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID,
  appId: process.env.NEXT_PUBLIC_FIREBASE_APP_ID,
};

// Initialize Firebase
export const app = initializeApp(firebaseConfig);

export const auth = getAuth(app);
export const db = getFirestore(app);

export const storage = getStorage(app);

================
File: src/server/db/models/analytics.ts
================
import mongoose, { Schema, Document, Model } from "mongoose";

export interface RecentShift {
  shiftName: string;
  shiftDate: Date;
}

export interface LeaderboardUser {
  firstName: string;
  lastName: string;
  bagelsDelivered?: number;
  totalDeliveries?: number;
}

export interface Analytics extends Document {
  totalBagelsDelivered: number;
  shiftsThisMonth: number;
  shiftsMonthlyAverage: number;
  recentShifts: RecentShift[];
  leaderboardUsersBagelsDelivered: LeaderboardUser[];
  leaderboardUsersTotalDeliveries: LeaderboardUser[];
}

const recentShiftSchema: Schema = new Schema({
  shiftName: { type: String, required: true },
  shiftDate: { type: Date, required: true },
});

const leaderboardUserSchema: Schema = new Schema({
  firstName: { type: String, required: true },
  lastName: { type: String, required: true },
  bagelsDelivered: { type: Number, required: true },
  totalDeliveries: { type: Number, required: true },
});

const analyticsSchema: Schema = new Schema({
  totalBagelsDelivered: {
    type: Number,
    default: 0,
  },
  shiftsThisMonth: {
    type: Number,
    default: 0,
  },
  shiftsMonthlyAverage: {
    type: Number,
    default: 0,
  },
  recentShifts: {
    type: [recentShiftSchema],
    default: [],
  },
  leaderboardUsersBagelsDelivered: {
    type: [leaderboardUserSchema],
    default: [],
  },
  leaderboardUsersTotalDeliveries: {
    type: [leaderboardUserSchema],
    default: [],
  },
});

const AnalyticsModel: Model<Analytics> =
  mongoose.models?.Analytics ||
  mongoose.model<Analytics>("Analytics", analyticsSchema);

const RecentShiftModel: Model<RecentShift> =
  mongoose.models?.RecentShift ||
  mongoose.model<RecentShift>("RecentShift", recentShiftSchema);

const LeaderboardUserModel: Model<LeaderboardUser> =
  mongoose.models?.LeaderboardUser ||
  mongoose.model<LeaderboardUser>("LeaderboardUser", leaderboardUserSchema);

export { AnalyticsModel, RecentShiftModel, LeaderboardUserModel };

================
File: src/server/db/models/location.ts
================
import mongoose, { Schema, Model } from "mongoose";

interface Address {
  street: string;
  city: string;
  zipCode: number;
  state: string;
}

interface Location {
  _id?: string;
  locationName: string;
  notes: string;
  contact: string;
  address: Address;
  type: "Pick-Up" | "Drop-Off";
  bags: number | "All Bags";
}

const AddressSchema: Schema = new Schema({
  street: { type: String, required: true },
  city: { type: String, required: true },
  zipCode: { type: Number, required: true },
  state: { type: String, required: true },
});

const LocationSchema: Schema = new Schema({
  locationName: { type: String, required: true },
  notes: { type: String, default: "" },
  contact: { type: String, default: "" },
  address: { type: AddressSchema, required: true },
  type: { type: String, enum: ["Pick-Up", "Drop-Off"], required: true },
  bags: { type: Number, default: 0 },
});

const LocationModel: Model<Location> =
  mongoose.models?.Location ||
  mongoose.model<Location>("Location", LocationSchema);

export { LocationModel };
export type { Location, Address };

================
File: src/server/db/models/Route.ts
================
import mongoose, { Schema, Document } from "mongoose";

export interface ILocation {
  location: mongoose.Types.ObjectId;
  type: "dropoff" | "pickup";
}

export interface IRoute extends Document {
  _id: mongoose.Types.ObjectId;
  routeName: string;
  locationDescription: string;
  locations: ILocation[];
}

const RouteSchema: Schema = new Schema({
  routeName: { type: String, required: true },
  locationDescription: { type: String, default: "" },
  locations: {
    type: [
      {
        location: { type: mongoose.Schema.Types.ObjectId, ref: "Location" },
        type: { type: String, enum: ["dropoff", "pickup"], required: true },
      },
    ],
    default: [],
  },
});

export default mongoose.models?.Route ||
  mongoose.model<IRoute>("Route", RouteSchema);

================
File: src/server/db/models/shift.ts
================
import mongoose, { Schema, Document, Model } from "mongoose";
import { RRule } from "rrule";

const { ObjectId } = Schema.Types;

interface Recurrence {
  date: Date;
  capacity: number;
  currSignedUp: number;
}

interface Shift extends Document {
  routeId: mongoose.Types.ObjectId;
  shiftDate: Date;
  shiftEndDate: Date;
  capacity: number;
  currSignedUp: number;
  recurrenceRule: string;
  recurrences: Recurrence[];
}

const recurrenceSchema: Schema = new Schema({
  date: {
    type: Date,
    required: true,
  },
  capacity: {
    type: Number,
    default: 0,
  },
  currSignedUp: {
    type: Number,
    default: 0,
  },
});

const shiftSchema: Schema = new Schema({
  routeId: {
    type: ObjectId,
    ref: "Route",
  },
  shiftDate: {
    type: Date,
  },
  shiftEndDate: {
    type: Date,
  },
  capacity: {
    type: Number,
    default: 0,
  },
  currSignedUp: {
    type: Number,
    default: 0,
  },
  recurrenceRule: {
    type: String,
    default: "",
    validate: {
      validator: function (str: string) {
        try {
          RRule.fromString(str);
          return true;
        } catch (e) {
          return false;
        }
      },
    },
  },
  recurrences: {
    type: [recurrenceSchema],
    default: [],
  },
});

const ShiftModel: Model<Shift> =
  mongoose.models?.Shift || mongoose.model<Shift>("Shift", shiftSchema);
const RecurrenceModel: Model<Recurrence> =
  mongoose.models?.Recurrence ||
  mongoose.model<Recurrence>("Recurrence", recurrenceSchema);

export { ShiftModel, RecurrenceModel };
export type { Shift, Recurrence };

================
File: src/server/db/models/User.ts
================
import mongoose from "mongoose";
import { ObjectId } from "mongoose";

const { Schema } = mongoose;

export interface IUser {
  _id?: ObjectId;
  username: string;
  isAdmin?: boolean;
  firstName: string;
  lastName: string;
  email: string;
  bagelsDelivered?: number;
  totalDeliveries?: number;
  phoneNumber?: string;
  acceptableLocations?: string;
}

const userSchema = new Schema({
  username: {
    type: String,
    required: true,
    unique: true,
  },
  isAdmin: {
    type: Boolean,
    default: false,
  },
  firstName: {
    type: String,
    required: true,
  },
  lastName: {
    type: String,
    required: true,
  },
  email: {
    type: String,
    required: true,
    match: [
      /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/,
      "Invalid email format",
    ],
  },
  bagelsDelivered: {
    type: Number,
    default: 0,
  },
  totalDeliveries: {
    type: Number,
    default: 0,
  },
  phoneNumber: {
    type: String,
    default: null,
  },
  acceptableLocations: {
    type: String,
    default: "",
  },
});

export default mongoose.models.User || mongoose.model("User", userSchema);

================
File: src/server/db/dbConnect.ts
================
"use server";
import mongoose, { Mongoose } from "mongoose";
import dotenv from "dotenv";

dotenv.config();

const DB_URL = process.env.MONGODB_URI;

if (!DB_URL) {
  throw new Error(
    "Please define the DB_URL environment variable inside .env*.local"
  );
}

/**
 * Global is used here to maintain a cached connection across hot reloads
 * in development. This prevents connections growing exponentially
 * during API Route usage.
 */
declare global {
  var mongoose: {
    conn: Mongoose | null;
    promise: Promise<Mongoose> | null;
  };
}

let cached = global.mongoose;

if (!cached) {
  cached = global.mongoose = { conn: null, promise: null };
}

export async function dbConnect() {
  console.log("dbConnect");
  if (cached.conn) {
    return cached.conn;
  }

  if (!cached.promise) {
    const opts = {
      bufferCommands: false,
    };
    cached.promise = mongoose.connect(DB_URL, opts).then((mongoose) => {
      mongoose.set("debug", process.env.NODE_ENV === "development");

      return mongoose;
    });
  }

  try {
    cached.conn = await cached.promise;
  } catch (e) {
    cached.promise = null;
    throw e;
  }

  return cached.conn;
}

export default dbConnect;

================
File: .eslintrc.json
================
{
  "extends": "next/core-web-vitals"
}

================
File: .gitignore
================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js
.yarn/install-state.gz

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# local env files
.env*.local
.env

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts

# Local Netlify folder
.netlify

================
File: env.d.ts
================
declare namespace NodeJS {
  interface ProcessEnv {
    MONGODB_URI: string;
    NODE_ENV: string;
  }
}

================
File: netlify.toml
================
[build]
  functions = "netlify/functions"

[functions]
  [functions.timeout]
  seconds = 30

================
File: next.config.mjs
================
/** @type {import('next').NextConfig} */
const nextConfig = {
  reactStrictMode: false,
};

export default nextConfig;

================
File: package.json
================
{
  "name": "bagel-rescue",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "browser": {
    "child_process": false
  },
  "dependencies": {
    "@fortawesome/fontawesome-svg-core": "^6.6.0",
    "@fortawesome/free-solid-svg-icons": "^6.6.0",
    "@fortawesome/react-fontawesome": "^0.2.2",
    "@netlify/functions": "^2.8.2",
    "dotenv": "^16.4.5",
    "firebase": "^11.0.2",
    "firebase-admin": "^13.0.0",
    "fortawesome": "^0.0.1-security",
    "js-cookie": "^3.0.5",
    "mongoose": "^8.6.1",
    "next": "14.2.7",
    "next-auth": "^4.24.11",
    "react": "^18",
    "react-beautiful-dnd": "^13.1.1",
    "react-dom": "^18",
    "react-hook-form": "^7.53.2",
    "react-icons": "^5.3.0",
    "rrule": "^2.8.1"
  },
  "devDependencies": {
    "@types/node": "^20",
    "@types/react": "^18.3.10",
    "@types/react-beautiful-dnd": "^13.1.8",
    "@types/react-dom": "^18",
    "@types/react-fontawesome": "^1.6.8",
    "eslint": "^8",
    "eslint-config-next": "14.2.7",
    "postcss": "^8",
    "tailwindcss": "^3.4.1",
    "ts-node": "^10.9.2",
    "typescript": "^5"
  }
}

================
File: postcss.config.mjs
================
/** @type {import('postcss-load-config').Config} */
const config = {
  plugins: {
    tailwindcss: {},
  },
};

export default config;

================
File: README.md
================
## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.

This project uses [`next/font`](https://nextjs.org/docs/basic-features/font-optimization) to automatically optimize and load Inter, a custom Google Font.

## Connecting to MongoDB and other stuff

Contact EM for .env file which will contain the URI.

## Tech Stack

- Next.js (frontend & backend)
- Firebase (auth)
- Tailwind (styling)
- Mongo (db)

================
File: tailwind.config.ts
================
import type { Config } from "tailwindcss";

const config: Config = {
  content: [
    "./src/pages/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/components/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/app/**/*.{js,ts,jsx,tsx,mdx}",
  ],
  theme: {
    extend: {
      backgroundImage: {
        "gradient-radial": "radial-gradient(var(--tw-gradient-stops))",
        "gradient-conic":
          "conic-gradient(from 180deg at 50% 50%, var(--tw-gradient-stops))",
      },
    },
  },
  plugins: [],
};
export default config;

================
File: tsconfig.json
================
{
  "compilerOptions": {
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts", "seedLocations.ts"],
  "exclude": ["node_modules"]
}



================================================================
End of Codebase
================================================================
